# Put in a table
rmse_table3 <- tibble(
Model = c("Poisson", "Negative Binomial", "Exponential", "GAM", "Polynomial", "Lognormal", "Gamma"),
RMSE  = c(rmse_cum_poisson3, rmse_cum_nb3, rmse_cum_exp3, rmse_cum_gam3, rmse_cum_poly3, rmse_cum_lognormal3, rmse_cum_gamma3)
)
# Plot
ggplot(rmse_table3, aes(x = reorder(Model, RMSE), y = RMSE, fill = Model)) +
geom_col(width = 0.6, show.legend = FALSE) +
geom_text(aes(label = round(RMSE, 1)), vjust = -0.5, size = 4) +
labs(
title = "RMSE of Cumulative Cases by Model",
subtitle = "Lower RMSE indicates better fit",
x = "Model",
y = "RMSE"
) +
theme_minimal()
#| code-fold: true
#| code-summary: "Show Code for obtaining Progress from 3 waves"
# For Wave 1
wave1 <- wave1 %>%
arrange(week_index) %>%
mutate(
cum_cases = cumsum(cases),
progress = cum_cases / max(cum_cases)
)
# For Wave 2
wave2 <- wave2 %>%
arrange(week_index) %>%
mutate(
cum_cases = cumsum(cases),
progress = cum_cases / max(cum_cases)
)
# For Wave 3
wave3 <- wave3 %>%
arrange(week_index) %>%
mutate(
cum_cases = cumsum(cases),
progress = cum_cases / max(cum_cases)
)
#| code-fold: true
#| code-summary: "Show Code for fitting models using Wave 1's data"
# GAM model
gam_progress1 <- gam(cases ~ s(progress), family = poisson(), data = wave1)
# Polynomial model
poly_progress1 <- glm(cases ~ poly(progress, 4), family = poisson(), data = wave1)
# Exponential model (fit on log scale)
exp_progress1 <- glm(log(cases + 1) ~ progress, family = gaussian(), data = wave1)
# Negative Binomial
nb_progress1 <- glm.nb(cases ~ poly(progress, 4), data = wave1)
# Poisson
poisson_progress1 <- glm(cases ~ poly(progress, 4), family = "poisson", data = wave1)
#| code-fold: true
#| code-summary: "Show Code for predicting Wave 2 and Wave 3"
# Predict using Wave 1 models on Wave 2
wave2 <- wave2 %>%
mutate(
pred_gam1   = predict(gam_progress1, newdata = wave2, type = "response"),
pred_poly1  = predict(poly_progress1, newdata = wave2, type = "response"),
pred_exp1   = exp(predict(exp_progress1, newdata = wave2)) - 1,
pred_nb1 = predict(nb_progress1, newdata = wave2, type = "response"),
pred_poisson1 = predict(poisson_progress1, newdata = wave2, type = "response")
)
# Predict using Wave 1 models on Wave 3
wave3 <- wave3 %>%
mutate(
pred_gam1   = predict(gam_progress1, newdata = wave3, type = "response"),
pred_poly1  = predict(poly_progress1, newdata = wave3, type = "response"),
pred_exp1   = exp(predict(exp_progress1, newdata = wave3)) - 1,
pred_nb1 = predict(nb_progress1, newdata = wave3, type = "response"),
pred_poisson1 = predict(poisson_progress1, newdata = wave3, type = "response")
)
#| code-fold: true
#| code-summary: "Show Code for plotting predicted and actual values of Wave 2 and Wave 3"
# Combine and label
wave1$wave <- "Wave 1"
wave2$wave <- "Wave 2"
wave3$wave <- "Wave 3"
predicted_progress1 <- bind_rows(wave1, wave2, wave3)
ggplot(predicted_progress1, aes(x = progress)) +
geom_line(aes(y = cases, color = wave), size = 2, alpha = 0.5) +
geom_line(aes(y = pred_gam1, color = "GAM"), linewidth = 1.2) +
geom_line(aes(y = pred_poly1, color = "Polynomial"), linewidth = 1.2, linetype = "dashed") +
geom_line(aes(y = pred_exp1, color = "Exponential"), linewidth = 1.2, linetype = "dotdash") +
geom_line(aes(y = pred_nb1, color = "Negative Binomial"), linewidth = 1, linetype = "twodash") +
geom_line(aes(y = pred_poisson1, color = "Poisson"), linewidth = 1, linetype = "longdash") +
facet_wrap(~wave, scales = "free_x") +
labs(
title = "Predicted vs Actual Epidemic Shapes (by Progress)",
x = "Progress (0 to 1)",
y = "Weekly Cases",
color = "Model / Wave"
) +
theme_minimal()
#| code-fold: true
#| code-summary: "Show Code for fitting models using Wave 2's data"
# GAM model
gam_progress2 <- gam(cases ~ s(progress), family = poisson(), data = wave2)
# Polynomial model
poly_progress2 <- glm(cases ~ poly(progress, 4), family = poisson(), data = wave2)
# Exponential model (fit on log scale)
exp_progress2 <- glm(log(cases + 1) ~ progress, family = gaussian(), data = wave2)
# Negative Binomial
nb_progress2 <- glm.nb(cases ~ poly(progress, 4), data = wave2)
# Poisson
poisson_progress2 <- glm(cases ~ poly(progress, 4), family = "poisson", data = wave2)
#| code-fold: true
#| code-summary: "Show Code for predicting Wave 1 and Wave 3"
# Predict on Wave 1
wave1 <- wave1 %>%
mutate(
pred_gam2       = predict(gam_progress2, newdata = wave1, type = "response"),
pred_poly2      = predict(poly_progress2, newdata = wave1, type = "response"),
pred_exp2       = exp(predict(exp_progress2, newdata = wave1)) - 1,
pred_nb2 = predict(nb_progress2, newdata = wave1, type = "response"),
pred_poisson2 = predict(poisson_progress2, newdata = wave1, type = "response"))
# Predict on Wave 3
wave3 <- wave3 %>%
mutate(
pred_gam2       = predict(gam_progress2, newdata = wave3, type = "response"),
pred_poly2      = predict(poly_progress2, newdata = wave3, type = "response"),
pred_exp2       = exp(predict(exp_progress2, newdata = wave3)) - 1,
pred_nb2 = predict(nb_progress2, newdata = wave3, type = "response"),
pred_poisson2 = predict(poisson_progress2, newdata = wave3, type = "response")
)
#| code-fold: true
#| code-summary: "Show Code for plotting predicted and actual values of Wave 1 and Wave 3"
# Combine for plotting
wave1$wave <- "Wave 1"
wave2$wave <- "Wave 2"
wave3$wave <- "Wave 3"
predicted_progress2 <- bind_rows(wave1, wave2, wave3)
ggplot(predicted_progress2, aes(x = progress)) +
geom_line(aes(y = cases, color = wave), alpha = 0.5, size = 2) +
geom_line(aes(y = pred_gam2, color = "GAM (from Wave 2)"), linewidth = 1) +
geom_line(aes(y = pred_poly2, color = "Polynomial (from Wave 2)"), linewidth = 1, linetype = "dashed") +
geom_line(aes(y = pred_exp2, color = "Exponential (from Wave 2)"), linewidth = 1, linetype = "dotdash") +
geom_line(aes(y = pred_nb2, color = "Negative Binomial (Wave 2)"), linewidth = 1, linetype = "twodash") +
geom_line(aes(y = pred_poisson2, color = "Poisson (Wave 2)"), linewidth = 1, linetype = "longdash") +
facet_wrap(~wave, scales = "free_x") +
labs(
title = "Predictions on Wave 1 & 3 using Models Trained on Wave 2",
x = "Progress (0–1)",
y = "Cases",
color = "Model / Wave"
) +
theme_minimal()
#| code-fold: true
#| code-summary: "Show Code for fitting models using Wave 3's data"
# GAM
gam_progress3 <- gam(cases ~ s(progress), family = poisson(), data = wave3)
# Polynomial
poly_progress3 <- glm(cases ~ poly(progress, 4), family = poisson(), data = wave3)
# Exponential (log scale)
exp_progress3 <- glm(log(cases + 1) ~ progress, family = gaussian(), data = wave3)
# Negative Binomial
nb_progress3 <- glm.nb(cases ~ poly(progress, 4), data = wave3)
# Poisson
poisson_progress3 <- glm(cases ~ poly(progress, 4), family = "poisson", data = wave3)
#| code-fold: true
#| code-summary: "Show Code for predicting Wave 1 and Wave 2"
wave1 <- wave1 %>%
mutate(
pred_gam3      = predict(gam_progress3, newdata = wave1, type = "response"),
pred_poly3     = predict(poly_progress3, newdata = wave1, type = "response"),
pred_exp3      = exp(predict(exp_progress3, newdata = wave1)) - 1,
pred_nb3 = predict(nb_progress3, newdata = wave1, type = "response"),
pred_poisson3 = predict(poisson_progress3, newdata = wave1, type = "response")
)
wave2 <- wave2 %>%
mutate(
pred_gam3      = predict(gam_progress3, newdata = wave2, type = "response"),
pred_poly3     = predict(poly_progress3, newdata = wave2, type = "response"),
pred_exp3      = exp(predict(exp_progress3, newdata = wave2)) - 1,
pred_nb3 = predict(nb_progress3, newdata = wave2, type = "response"),
pred_poisson3 = predict(poisson_progress3, newdata = wave2, type = "response")
)
#| code-fold: true
#| code-summary: "Show Code for plotting predicted and actual values of Wave 1 and Wave 2"
wave1$wave <- "Wave 1"
wave2$wave <- "Wave 2"
wave3$wave <- "Wave 3"
predicted_progress3 <- bind_rows(wave1, wave2, wave3)
ggplot(predicted_progress3, aes(x = progress)) +
geom_line(aes(y = cases, color = wave), size = 2, alpha = 0.5) +
geom_line(aes(y = pred_gam3, color = "GAM (from Wave 3)"), linewidth = 1) +
geom_line(aes(y = pred_poly3, color = "Polynomial (from Wave 3)"), linewidth = 1, linetype = "dashed") +
geom_line(aes(y = pred_exp3, color = "Exponential (from Wave 3)"), linewidth = 1, linetype = "dotdash") +
geom_line(aes(y = pred_nb3, color = "Negative Binomial (Wave 3)"), linewidth = 1, linetype = "twodash") +
geom_line(aes(y = pred_poisson3, color = "Poisson (Wave 3)"), linewidth = 1, linetype = "longdash") +
facet_wrap(~wave, scales = "free_x") +
labs(
title = "Predictions on Wave 1 & 2 using Models Trained on Wave 3",
x = "Progress (0–1)",
y = "Cases",
color = "Model / Wave"
) +
theme_minimal()
#| code-fold: true
#| code-summary: "Show Code for RMSE function"
rmse <- function(actual, predicted) {
sqrt(mean((actual - predicted)^2, na.rm = TRUE))}
#| code-fold: true
#| code-summary: "Show Code for predicting the 2014 Outbreak"
fit_metrics231 <- tibble(
Model = rep(c("GAM", "Polynomial", "Exponential", "Negative\nBinomial", "Poisson"), times = 2),
RMSE = c(
rmse(wave1$cases, wave1$pred_gam2),
rmse(wave1$cases, wave1$pred_poly2),
rmse(wave1$cases, wave1$pred_exp2),
rmse(wave1$cases, wave1$pred_nb2),
rmse(wave1$cases, wave1$pred_poisson2),
rmse(wave1$cases, wave1$pred_gam3),
rmse(wave1$cases, wave1$pred_poly3),
rmse(wave1$cases, wave1$pred_exp3),
rmse(wave1$cases, wave1$pred_nb3),
rmse(wave1$cases, wave1$pred_poisson3)
),
Wave = rep(c("Wave 2", "Wave 3"), each = 5)
)
# Plot side-by-side bars
ggplot(fit_metrics231, aes(x = Model, y = RMSE, fill = Wave)) +
geom_col(position = position_dodge(width = 0.9)) +
geom_text(aes(label = round(RMSE, 2)),
position = position_dodge(width = 0.8),
vjust = -0.3, size = 2.5) +
labs(
title = "RMSE of Models (Wave 2 vs Wave 3)",
x = "Model",
y = "RMSE"
) +
theme_minimal() +
scale_fill_brewer(palette = "Pastel1")
#| code-fold: true
#| code-summary: "Show Code for predicting the 2015 Outbreak"
fit_metrics132 <- tibble(
Model = rep(c("GAM", "Polynomial", "Exponential", "Negative\nBinomial", "Poisson"), times = 2),
RMSE = c(
rmse(wave2$cases, wave2$pred_gam1),
rmse(wave2$cases, wave2$pred_poly1),
rmse(wave2$cases, wave2$pred_exp1),
rmse(wave2$cases, wave2$pred_nb1),
rmse(wave2$cases, wave2$pred_poisson1),
rmse(wave2$cases, wave2$pred_gam3),
rmse(wave2$cases, wave2$pred_poly3),
rmse(wave2$cases, wave2$pred_exp3),
rmse(wave2$cases, wave2$pred_nb3),
rmse(wave2$cases, wave2$pred_poisson3)
),
Wave = rep(c("Wave 1", "Wave 3"), each = 5)
)
# Plot side-by-side bars
ggplot(fit_metrics132, aes(x = Model, y = RMSE, fill = Wave)) +
geom_col(position = position_dodge(width = 0.9)) +
geom_text(aes(label = round(RMSE, 2)),
position = position_dodge(width = 0.8),
vjust = -0.3, size = 2.5) +
labs(
title = "RMSE of Models (Wave 1 vs Wave 3)",
x = "Model",
y = "RMSE"
) +
theme_minimal() +
scale_fill_brewer(palette = "Pastel1")
#| code-fold: true
#| code-summary: "Show Code for predicting the 2023 Outbreak"
fit_metrics123 <- tibble(
Model = rep(c("GAM", "Polynomial", "Exponential", "Negative\nBinomial", "Poisson"), times = 2),
RMSE = c(
rmse(wave3$cases, wave3$pred_gam1),
rmse(wave3$cases, wave3$pred_poly1),
rmse(wave3$cases, wave3$pred_exp1),
rmse(wave3$cases, wave3$pred_nb1),
rmse(wave3$cases, wave3$pred_poisson1),
rmse(wave3$cases, wave3$pred_gam2),
rmse(wave3$cases, wave3$pred_poly2),
rmse(wave3$cases, wave3$pred_exp2),
rmse(wave3$cases, wave3$pred_nb2),
rmse(wave3$cases, wave3$pred_poisson2)
),
Wave = rep(c("Wave 1", "Wave 2"), each = 5)
)
# Plot side-by-side bars
ggplot(fit_metrics123, aes(x = Model, y = RMSE, fill = Wave)) +
geom_col(position = position_dodge(width = 0.9)) +
geom_text(aes(label = round(RMSE, 2)),
position = position_dodge(width = 0.8),
vjust = -0.3, size = 2.5) +
labs(
title = "RMSE of Models (Wave 1 vs Wave 2)",
x = "Model",
y = "RMSE"
) +
theme_minimal() +
scale_fill_brewer(palette = "Pastel1")
#| code-fold: true
#| code-summary: "Loading R packages"
pacman::p_load(tidyverse, plotly, sf, tmap, GGally, ggstatsplot, ggmosaic)
#| code-fold: true
#| code-summary: "Importing Dengue_Daily dataset"
dengue_daily <- read_csv("data/dengue_daily_en.csv")
summary(dengue_daily)
#| code-fold: true
#| code-summary: "Show code"
mean_age_group_year <- dengue_daily %>%
group_by(Age_Group, Onset_Year) %>%
summarize(Mean = mean(n()), .groups = "drop")
ggplot(mean_age_group_year, aes(x = Age_Group, y = Mean, fill = Age_Group)) +
geom_boxplot() +
labs(title = "Distribution of Dengue Cases Across Age Groups",
x = "Age Group",
y = "Mean Dengue Cases per Year")
#| code-fold: true
#| code-summary: "Show code"
sum_age_group <- dengue_daily %>%
group_by(Age_Group) %>%
summarize(Count = n(), .groups = "drop")
chisq.test(sum_age_group$Count)
#| code-fold: true
#| code-summary: "Show code"
ggbetweenstats(
data = sum_age_group,
x = Age_Group,
y = Count,
type = "np",
mean.ci = TRUE,
p.adjust.method = "fdr",
messages = FALSE
)
#| code-fold: true
#| code-summary: "Show code"
sum_age_group_year <- dengue_daily %>%
group_by(Age_Group, Onset_Year) %>%
summarize(Count = n(), .groups = "drop")
sum_age_group_year_table <- table(sum_age_group_year$Age_Group,
sum_age_group_year$Onset_Year)
chisq.test(sum_age_group_year_table)
#| code-fold: true
#| code-summary: "Show code"
ggbetweenstats(
data = sum_age_group_year,
x = Age_Group,
y = Count,
type = "p",
mean.ci = TRUE,
pairwise.comparisons = TRUE,
pairwise.display = "s",
p.adjust.method = "fdr",
messages = FALSE
)
#| code-fold: true
#| code-summary: "Show code"
group_by_gender_test <- group_by_gender %>%
filter(Gender %in% c("F", "M"))
#| code-fold: true
#| code-summary: "Loading R packages"
pacman::p_load(tidyverse, plotly, sf, tmap, GGally, ggstatsplot, ggmosaic)
#| code-fold: true
#| code-summary: "Importing Dengue_Daily dataset"
dengue_daily <- read_csv("data/dengue_daily_en.csv")
summary(dengue_daily)
#| code-fold: true
#| code-summary: "Show code"
group_by_age <- dengue_daily %>%
group_by(Age_Group, Onset_Year) %>%
summarize(Count = n(), .groups = "drop")
group_by_gender <- dengue_daily %>%
group_by(Gender, Onset_Year) %>%
summarize(Count = n(), .groups = "drop")
group_by_serotype <- dengue_daily %>%
group_by(Serotype, Onset_Year) %>%
summarize(Count = n(), .groups = "drop")
group_by_county <- dengue_daily %>%
group_by(Residential_County_City, Onset_Year) %>%
summarize(Count = n(), .groups = "drop")
group_by_imported <- dengue_daily %>%
group_by(Imported_Case, Onset_Year) %>%
summarize(Count = n(), .groups = "drop")
#| code-fold: true
#| code-summary: "Show code"
mean_age_group_year <- dengue_daily %>%
group_by(Age_Group, Onset_Year) %>%
summarize(Mean = mean(n()), .groups = "drop")
ggplot(mean_age_group_year, aes(x = Age_Group, y = Mean, fill = Age_Group)) +
geom_boxplot() +
labs(title = "Distribution of Dengue Cases Across Age Groups",
x = "Age Group",
y = "Mean Dengue Cases per Year")
#| code-fold: true
#| code-summary: "Show code"
sum_age_group <- dengue_daily %>%
group_by(Age_Group) %>%
summarize(Count = n(), .groups = "drop")
chisq.test(sum_age_group$Count)
#| code-fold: true
#| code-summary: "Show code"
ggbetweenstats(
data = sum_age_group,
x = Age_Group,
y = Count,
type = "np",
mean.ci = TRUE,
p.adjust.method = "fdr",
messages = FALSE
)
#| code-fold: true
#| code-summary: "Show code"
sum_age_group_year <- dengue_daily %>%
group_by(Age_Group, Onset_Year) %>%
summarize(Count = n(), .groups = "drop")
sum_age_group_year_table <- table(sum_age_group_year$Age_Group,
sum_age_group_year$Onset_Year)
chisq.test(sum_age_group_year_table)
#| code-fold: true
#| code-summary: "Show code"
ggbetweenstats(
data = sum_age_group_year,
x = Age_Group,
y = Count,
type = "p",
mean.ci = TRUE,
pairwise.comparisons = TRUE,
pairwise.display = "s",
p.adjust.method = "fdr",
messages = FALSE
)
#| code-fold: true
#| code-summary: "Show code"
group_by_gender_test <- group_by_gender %>%
filter(Gender %in% c("F", "M"))
t_test_gender <- t.test(Count ~ Gender, data = group_by_gender_test)
t_test_gender
#| code-fold: true
#| code-summary: "Show code"
ggbetweenstats(
data = group_by_gender_test,
x = Gender,
y = Count,
type = "np",
messages = FALSE
)
#| code-fold: true
#| code-summary: "Show code"
t_test_gender <- t.test(Count ~ Imported_Case, data = group_by_imported)
t_test_gender
#| code-fold: true
#| code-summary: "Show code"
ggbetweenstats(
data = group_by_imported,
x = Imported_Case,
y = Count,
type = "np",
messages = FALSE
)
#| code-fold: true
#| code-summary: "Show code"
# Excluding data with missing Serotype
group_by_serotype_test <- group_by_serotype %>% filter(!is.na(Serotype))
kruskal.test(Count ~ Serotype, data = group_by_serotype_test)
#| code-fold: true
#| code-summary: "Show code"
ggbetweenstats(
data = group_by_serotype_test,
x = Serotype,
y = Count,
type = "p",
mean.ci = TRUE,
pairwise.comparisons = TRUE,
pairwise.display = "s",
p.adjust.method = "fdr",
messages = FALSE
)
#| code-fold: true
#| code-summary: "Show code"
kruskal.test(Count ~ Residential_County_City, data = group_by_county)
#| code-fold: true
#| code-summary: "Show code"
ggbetweenstats(
data = group_by_county,
x = Residential_County_City,
y = Count,
type = "p",
mean.ci = TRUE,
pairwise.comparisons = TRUE,
pairwise.display = "s",
p.adjust.method = "fdr",
messages = FALSE
)
shiny::runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
shiny::runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
shiny::runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
