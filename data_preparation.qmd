---
title: "Data Preparation"
author: "Jia Peng Chua | Zanelle Lee Wenfang"
date-modified: "last-modified"
execute:
    echo: true
    eval: true
    warning: false
    freeze: true
---

# 1 Loading R Packages and Datasets

## 1.1 Loading R Packages

The following R packages will be required:

-   `tidyverse`: Used for data manipulation, visualisation and analysis

-   `plotly`: For plotting interactive statistical graphs

-   `sf`: For analysing and visualising spatial data

-   `tmap`: Create static and interactive thematic maps

-   `GGally`: Provide additional visualisation functions

-   `ggplot2`: For customisable plots

```{r}
#| code-fold: true
#| code-summary: "Loading R packages"
pacman::p_load(tidyverse, plotly, sf, tmap, GGally, ggstatsplot, ggmosaic)
```

## 1.2 Importing Dengue Dataset

The code chunk below uses `read_csv()` of `readr` to import the `dengue_daily` dataset into R environment.

```{r}
#| code-fold: true
#| code-summary: "Importing Dengue_Daily dataset"
dengue_daily <- read_csv("data/Dengue_Daily.csv")

summary(dengue_daily)
```

Translating the column names into English will make the dataset more user-friendly:

-   發病日: Onset Date

-   個案研判日: Case Classification Date

-   通報日: Reporting Date

-   性別: Gender

-   年齡層: Age Group

-   居住縣市: Residential County/City

-   居住鄉鎮: Residential Town/District

-   居住村里: Residential Village

-   最小統計區: Smallest Statistical Area

-   最小統計區中心點X: X-coord

-   最小統計區中心點Y: Y-coord

-   一級統計區: Primary Statistical Area

-   二級統計區: Secondary Statistical Area

-   感染縣市: Infection County/City

-   感染鄉鎮: Infection Town/District

-   感染村里: Infection Village

-   是否境外移入: Imported Case

-   感染國家: Infection Country

-   確定病例數: Confirmed Cases

-   居住村里代碼: Residential Village Code

-   感染村里代碼: Infection Village Code

-   血清型: Serotype

-   內政部居住縣市代碼: MOI Residential County Code

-   內政部居住鄉鎮代碼: MOI Residential Town Code

-   內政部感染縣市代碼: MOI Infection County Code

-   內政部感染鄉鎮代碼: MOI Infection Town Code

```{r}
#| code-fold: true
#| code-summary: "Show code"
colnames(dengue_daily) <- c("Onset_Date", "Case_Classification_Date", "Reporting_Date", "Gender", 
                  "Age_Group", "Residential_County_City", "Residential_Town_District", 
                  "Residential_Village", "Smallest_Statistical_Area", "X_coord", 
                  "Y_coord", "Primary_Statistical_Area", "Secondary_Statistical_Area",
                  "Infection_County_City", "Infection_Town_District", "Infection_Village",
                  "Imported_Case", "Infection_Country", "Confirmed_Cases", 
                  "Residential_Village_Code", "Infection_Village_Code", "Serotype", 
                  "MOI_Residential_County_Code", "MOI_Residential_Town_Code", 
                  "MOI_Infection_County_Code", "MOI_Infection_Town_Code")
```

Checking the column titles:

```{r}
#| echo: FALSE
names(dengue_daily)
```

Translating the `Imported_Case` and `Residential_County_City` column values for better usability.

-   屏東縣: Pingtung County

-   宜蘭縣: Yilan County

-   高雄市: Kaohsiung City

-   桃園市: Taoyuan City

-   新北市: New Taipei City

-   台北市: Taipei City

-   台南市: Tainan City

-   新竹縣: Hsinchu County

-   南投縣: Nantou County

-   台中市: Taichung City

-   新竹市: Hsinchu City

-   雲林縣: Yunlin County

-   彰化縣: Changhua County

-   花蓮縣: Hualien County

-   台東縣: Taitung County

-   嘉義縣: Chiayi County

-   嘉義市: Chiayi City

-   基隆市: Keelung City

-   苗栗縣: Miaoli County

-   澎湖縣: Penghu County

-   連江縣: Lianjiang County

-   金門縣: Kinmen County

```{r}
dengue_daily <- dengue_daily %>%
    rowwise() %>% 
    mutate(Confirmed_Cases = list(rep(1, Confirmed_Cases))) %>% 
    unnest(Confirmed_Cases)  
```

Viewing the `Age_Group` column.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| fig-height: 10
#| fig-width: 8
age_group_count <- dengue_daily %>%
  count(Age_Group)

print(age_group_count)
```

The Age_Group values are inconsistent as there are individual values with relatively low counts. Let's combine ages 0,1,2,3,4, to a single age group, "0-4", and sort the columns for better readability.

We will also translate the columns for better readability for our users.

```{r}
#| code-fold: true
#| code-summary: "Show Code for translations and regrouping of age group"
dengue_daily <- dengue_daily %>%
    mutate(Residential_County_City = recode(Residential_County_City,
                                              "屏東縣" = "Pingtung County",
                                              "宜蘭縣" = "Yilan County",
                                              "高雄市" = "Kaohsiung City",
                                              "桃園市" = "Taoyuan City",
                                              "新北市" = "New Taipei City",
                                              "台北市" = "Taipei City",
                                              "台南市" = "Tainan City",
                                              "新竹縣" = "Hsinchu County",
                                              "南投縣" = "Nantou County",
                                              "台中市" = "Taichung City",
                                              "新竹市" = "Hsinchu City",
                                              "雲林縣" = "Yunlin County",
                                              "彰化縣" = "Changhua County",
                                              "花蓮縣" = "Hualien County",
                                              "台東縣" = "Taitung County",
                                              "嘉義縣" = "Chiayi County",
                                              "嘉義市" = "Chiayi City",
                                              "基隆市" = "Keelung City",
                                              "苗栗縣" = "Miaoli County",
                                              "澎湖縣" = "Penghu County",
                                              "連江縣" = "Lianjiang County",
                                              "金門縣" = "Kinmen County"),
           Imported_Case = recode(Imported_Case, "是" = "Yes", "否" = "No"),
           Serotype = recode(Serotype, "第一型" = "Type 1",
                             "第二型" = "Type 2",
                             "第三型" = "Type 3",
                             "第四型" = "Type 4"),
           Age_Group = ifelse(Age_Group %in% c("0", "1", "2", "3", "4"), 
                              "0-4", Age_Group),
           Age_Group = factor(Age_Group, levels = c("0-4", "5-9", 
                                                    sort(unique(Age_Group[
                                                        Age_Group != "0-4" &
                                                            Age_Group != "5-9"]
                                                        )))))
```

We'll select columns required for our analysis.

```{r}
#| code-fold: true
#| code-summary: "Selected columns"
dengue_daily <- dengue_daily %>% 
    select(Onset_Date, Gender, Age_Group, Residential_County_City, 
           Residential_Town_District, X_coord, Y_coord, Imported_Case, Serotype,
           MOI_Residential_County_Code, MOI_Residential_Town_Code)
```

# 2. Data Preparation

## 2.1 View Dataset Over the Years

Let observe the dengue cases by age groups over the years.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| fig-width: 8
dengue_daily <- dengue_daily %>%
  mutate(Onset_Date = ymd(Onset_Date)) 

# Extract the year from the Date column
dengue_daily <- dengue_daily %>%
  mutate(Onset_Year = as.integer(year(Onset_Date)))

dengue_daily_aggregated <- dengue_daily %>%
  group_by(Age_Group, Residential_County_City, Onset_Year) %>%
  summarize(Count = n(), .groups = "drop")

cases_by_age <- dengue_daily_aggregated %>%
  plot_ly(x = ~Age_Group, 
          y = ~Count, 
          color = ~Residential_County_City,
          text = ~Residential_County_City, 
          hoverinfo = "text",
          type = 'scatter',
          mode = 'markers',
          frame = ~Onset_Year) %>%
  layout(
    title = "Dengue Cases by Age Group",
    xaxis = list(title = "Age Group"),
    yaxis = list(title = "Count of Cases"),
    showlegend = FALSE
  )

cases_by_age
```

Let observe the dengue cases by various factors over the years.

::: panel-tabset
### Age Group

```{r}
#| code-fold: true
#| code-summary: "Show Code"
group_by_age <- dengue_daily %>%
  group_by(Age_Group, Onset_Year) %>%
  summarize(Count = n(), .groups = "drop")

ggplot(group_by_age, aes(x = Onset_Year, y = Count, 
                         fill = factor(Age_Group))) +
    geom_bar(stat = "identity") +
    labs(title = "Dengue Cases by Age Group Across Years",
        x = "Year",
        y = "Count of Cases",
        fill = "Age_Group")
```

### Gender

```{r}
#| code-fold: true
#| code-summary: "Show Code"
group_by_gender <- dengue_daily %>%
  group_by(Gender, Onset_Year) %>%
  summarize(Count = n(), .groups = "drop")

ggplot(group_by_gender, aes(x = Onset_Year, y = Count, 
                            fill = factor(Gender))) +
    geom_bar(stat = "identity") +
    labs(title = "Dengue Cases by Gender Across Years",
        x = "Year",
        y = "Count of Cases",
        fill = "Gender")
```

### Serotype

```{r}
#| code-fold: true
#| code-summary: "Show Code"
group_by_serotype <- dengue_daily %>%
  group_by(Serotype, Onset_Year) %>%
  summarize(Count = n(), .groups = "drop")

ggplot(group_by_serotype, aes(x = Onset_Year, y = Count, 
                              fill = factor(Serotype))) +
    geom_bar(stat = "identity") +
    labs(title = "Dengue Cases by Serotype Across Years",
        x = "Year",
        y = "Count of Cases",
        fill = "Serotype") 
```

### Residential County City

```{r}
#| code-fold: true
#| code-summary: "Show Code"
#| fig-width: 10
group_by_county <- dengue_daily %>%
  group_by(Residential_County_City, Onset_Year) %>%
  summarize(Count = n(), .groups = "drop")

ggplot(group_by_county, aes(x = Onset_Year, y = Count, 
                            fill = factor(Residential_County_City))) +
    geom_bar(stat = "identity") +
    labs(title = "Dengue Cases by County City Across Years",
        x = "Year",
        y = "Count of Cases",
        fill = "County City") + 
    theme(legend.text = element_text(size = 7),   
    )
```

### Imported Cases

```{r}
#| code-fold: true
#| code-summary: "Show Code"
group_by_imported <- dengue_daily %>%
  group_by(Imported_Case, Onset_Year) %>%
  summarize(Count = n(), .groups = "drop")

ggplot(group_by_imported, aes(x = Onset_Year, y = Count, 
                              fill = factor(Imported_Case))) +
    geom_bar(stat = "identity") +
    labs(title = "Dengue Cases by County City Across Years",
        x = "Year",
        y = "Count of Cases",
        fill = "Imported Case") 
```
:::

## 2.2 Check Missing Values

::: panel-tabset
### X_coord

```{r}
#| code-fold: true
#| code-summary: "Show Code"
sum(is.na(dengue_daily$X_coord))
```

### Y_coord

```{r}
#| code-fold: true
#| code-summary: "Show Code"
sum(is.na(dengue_daily$Y_coord))
```
:::

We'll only keep the rows where there's X-coordinate and Y-coordinate value.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
dengue_daily <- dengue_daily %>% filter(X_coord != 0, Y_coord != 0)
```

## 2.3 Deriving Epiweek

[`epiweek()`](https://lubridate.tidyverse.org/reference/week.html) is the US CDC version of epidemiological week. It follows same rules as `isoweek()` but starts on Sunday. We create a new variable `Onset_Epiweek` to log the epidemiological weeks.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
dengue_daily <- dengue_daily %>% mutate(Onset_Epiweek = epiweek(Onset_Date))
```

## 2.4 Exporting CSV file

```{r}
#| code-fold: true
#| code-summary: "Allow exporting of dengue_daily CSV file"
write.csv(dengue_daily, "data/dengue_daily_en.csv", row.names = FALSE)
```
