{
  "hash": "613e97bf125b99604c77056befc3e60f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Time Series\"\nauthor: \"Jia Peng Chua | Zanelle Lee Wenfang\"\ndate-modified: \"last-modified\"\nexecute:\n    echo: true\n    eval: true\n    warning: false\n    freeze: true\n---\n\n\n\n# 1. Loading R Packages and Data Preparation\n\nFirst, we load the appropriate R packages that are necessary for the exploration of the dataset, as well as for its analysis and time series usage. In this segment, we will be loading **tidyverse**, **MASS**, **mgcv**, and **Metrics**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for loading R packages\"}\npacman::p_load(tidyverse, plotly, MASS, mgcv, Metrics, gt)\n```\n:::\n\n\n\nThe dataset is loaded into *dengue_daily*, and *summary()* is used to get a rough idea on the dataset and its variables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for loading dataset\"}\ndengue_daily <- read_csv(\"data/Dengue_Daily.csv\")\nsummary(dengue_daily)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     發病日             個案研判日             通報日          \n Min.   :1998-01-02   Min.   :2004-05-16   Min.   :1998-01-07  \n 1st Qu.:2014-10-29   1st Qu.:2014-11-28   1st Qu.:2014-10-31  \n Median :2015-09-29   Median :2015-10-10   Median :2015-10-01  \n Mean   :2016-04-13   Mean   :2017-02-27   Mean   :2016-04-16  \n 3rd Qu.:2023-07-10   3rd Qu.:2023-08-18   3rd Qu.:2023-07-13  \n Max.   :2025-03-16   Max.   :2025-03-16   Max.   :2025-03-16  \n                      NA's   :6279                             \n     性別              年齡層            居住縣市           居住鄉鎮        \n Length:107312      Length:107312      Length:107312      Length:107312     \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n   居住村里          最小統計區        最小統計區中心點X 最小統計區中心點Y\n Length:107312      Length:107312      Min.   :118.3     Min.   :21.93    \n Class :character   Class :character   1st Qu.:120.2     1st Qu.:22.63    \n Mode  :character   Mode  :character   Median :120.3     Median :22.96    \n                                       Mean   :120.3     Mean   :22.91    \n                                       3rd Qu.:120.3     3rd Qu.:23.00    \n                                       Max.   :122.0     Max.   :26.16    \n                                       NA's   :789       NA's   :789      \n  一級統計區         二級統計區          感染縣市           感染鄉鎮        \n Length:107312      Length:107312      Length:107312      Length:107312     \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n   感染村里         是否境外移入         感染國家           確定病例數\n Length:107312      Length:107312      Length:107312      Min.   :1   \n Class :character   Class :character   Class :character   1st Qu.:1   \n Mode  :character   Mode  :character   Mode  :character   Median :1   \n                                                          Mean   :1   \n                                                          3rd Qu.:1   \n                                                          Max.   :2   \n                                                                      \n 居住村里代碼       感染村里代碼          血清型          內政部居住縣市代碼\n Length:107312      Length:107312      Length:107312      Min.   :   63.0   \n Class :character   Class :character   Class :character   1st Qu.:   64.0   \n Mode  :character   Mode  :character   Mode  :character   Median :   67.0   \n                                                          Mean   :  546.3   \n                                                          3rd Qu.:   67.0   \n                                                          Max.   :10020.0   \n                                                          NA's   :476       \n 內政部居住鄉鎮代碼 內政部感染縣市代碼 內政部感染鄉鎮代碼\n Min.   : 900701    Min.   :   63      Min.   :1000202   \n 1st Qu.:6400700    1st Qu.:   64      1st Qu.:6400700   \n Median :6401800    Median :   66      Median :6401600   \n Mean   :6281126    Mean   :  359      Mean   :6384118   \n 3rd Qu.:6703300    3rd Qu.:   67      3rd Qu.:6703300   \n Max.   :6801200    Max.   :10020      Max.   :6801000   \n NA's   :476        NA's   :19108      NA's   :19108     \n```\n\n\n:::\n:::\n\n\n\nAs this is a Taiwan dataset, it is not surprising that most of the data is recorded in Mandarin. For easier referencing and usage of the dataset, the column names are translated to English.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for columns translation\"}\ncolnames(dengue_daily) <- c(\"Onset_Date\", \"Case_Classification_Date\", \"Reporting_Date\", \"Gender\", \n                  \"Age_Group\", \"Residential_County_City\", \"Residential_Town_District\", \n                  \"Residential_Village\", \"Smallest_Statistical_Area\", \"X_coord\", \n                  \"Y_coord\", \"Primary_Statistical_Area\", \"Secondary_Statistical_Area\",\n                  \"Infection_County_City\", \"Infection_Town_District\", \"Infection_Village\",\n                  \"Imported_Case\", \"Infection_Country\", \"Confirmed_Cases\", \n                  \"Residential_Village_Code\", \"Infection_Village_Code\", \"Serotype\", \n                  \"MOI_Residential_County_Code\", \"MOI_Residential_Town_Code\", \n                  \"MOI_Infection_County_Code\", \"MOI_Infection_Town_Code\")\n```\n:::\n\n\n\nLooking through the variables, we realized that *Confirmed_Cases* have 2 rows that consist of count \"2\" instead of \"1\" like all the other rows. Thus, we duplicate these rows to the number of count (i.e. 2) and change the count to \"1\". The code will work for rows with number of count more than 2 as well. This column will then not be necessary for future steps.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for amending Confirmed_Cases column\"}\ndengue_daily <- dengue_daily %>%\n  rowwise() %>%   \n  mutate(Confirmed_Cases = list(rep(1, Confirmed_Cases))) %>%   \n  unnest(Confirmed_Cases)\n\n# to check if done correctly, uncomment below line code\n#dengue_daily %>% filter(Confirmed_Cases != 1)\n```\n:::\n\n\n\nThe relevant columns are then selected, and these include *Onset_Date*, *Gender*, *Age_Group*, *Residential_County_City*, *Residential_Town_District*, *X_coord*, *Y_coord*, *Imported_Case*, *Serotype*, *MOI_Residential_County_Code*, *MOI_Residential_Town_Code*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for columns selection\"}\ndengue_daily <- dengue_daily %>% \n    dplyr::select(Onset_Date, Gender, Age_Group, Residential_County_City, \n           Residential_Town_District, X_coord, Y_coord, Imported_Case, \n           Serotype, MOI_Residential_County_Code, MOI_Residential_Town_Code)\n```\n:::\n\n\n\nThe data was also further scrutinized. The following amendments were made to make the dataset easier to reference and work with:\n\n1.  Translating *Residential_County_City*, *Imported_Case* and *Serotype* into English. This was done using [Google Translate](https://translate.google.com.sg/).\n2.  Creating a variable *Onset_Epiweek* from *Onset_Date*.\n3.  Changing 1 row consisting of *Gender* \"U\" to \"M\" instead. The row contains usable data in the other columns and does not need to be removed from the dataset. The gender is then changed to \"M\" for convenience. This should be noted when *Gender* is being studied, although it should not vary greatly due to the large dataset.\n4.  Padding *MOI_Residential_County_Code* with \"0\" to its right to make a 5 digit county code.\n5.  Binning ages 0-4 and amending the format of those in ages 5-9 (originally reflected as a date format). The age groups are then sorted in an ascending order.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for further preparation of data 1\"}\ndengue_daily <- dengue_daily %>%\n  mutate(Residential_County_City = recode(Residential_County_City,\n                                      \"屏東縣\" = \"Pingtung County\",\n                                      \"宜蘭縣\" = \"Yilan County\",\n                                      \"高雄市\" = \"Kaohsiung City\",\n                                      \"桃園市\" = \"Taoyuan City\",\n                                      \"新北市\" = \"New Taipei City\",\n                                      \"台北市\" = \"Taipei City\",\n                                      \"台南市\" = \"Tainan City\",\n                                      \"新竹縣\" = \"Hsinchu County\",\n                                      \"南投縣\" = \"Nantou County\",\n                                      \"台中市\" = \"Taichung City\",\n                                      \"新竹市\" = \"Hsinchu City\",\n                                      \"雲林縣\" = \"Yunlin County\",\n                                      \"彰化縣\" = \"Changhua County\",\n                                      \"花蓮縣\" = \"Hualien County\",\n                                      \"台東縣\" = \"Taitung County\",\n                                      \"嘉義縣\" = \"Chiayi County\",\n                                      \"嘉義市\" = \"Chiayi City\",\n                                      \"基隆市\" = \"Keelung City\",\n                                      \"苗栗縣\" = \"Miaoli County\",\n                                      \"澎湖縣\" = \"Penghu County\",\n                                      \"連江縣\" = \"Lianjiang County\",\n                                      \"金門縣\" = \"Kinmen County\"),\n         Onset_Epiweek = epiweek(Onset_Date),\n         Gender = recode(Gender, \"U\" = \"M\"),\nImported_Case = recode(Imported_Case, \"是\" = \"Yes\", \n                       \"否\" = \"No\"),\nSerotype = recode(Serotype, \"第一型\" = \"Type 1\",\n                  \"第二型\" = \"Type 2\",\n                  \"第三型\" = \"Type 3\",\n                  \"第四型\" = \"Type 4\"),\nMOI_Residential_County_Code = \n               str_pad(MOI_Residential_County_Code, width = 5, \n                       side = \"right\", pad = \"0\"),\nAge_Group = ifelse(Age_Group %in% c(\"0\", \"1\", \"2\", \"3\", \"4\"), \"0-4\", Age_Group),\n         Age_Group = factor(Age_Group, levels = c(\"0-4\", \"5-9\", \n                                                  sort(unique(Age_Group[\n                                                      Age_Group != \"0-4\" & Age_Group != \"5-9\"]\n                                                      )))))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for further preparation of data 2\"}\nweekly_cases <- dengue_daily %>%\n  mutate(week = floor_date(Onset_Date, \"week\")) %>%\n  group_by(week) %>%\n  summarise(cases = n())\n\nwave1_start <- as.Date(\"2014-05-11\")\nwave1_end <- as.Date(\"2015-01-25\")\n\nwave2_start <- as.Date(\"2015-05-24\")\nwave2_end <- as.Date(\"2016-02-14\")\n\nwave3_start <- as.Date(\"2023-05-07\")\nwave3_end <- as.Date(\"2024-02-04\")\n\ndengue_daily <- dengue_daily %>%\n  mutate(Wave = case_when(\n    Onset_Date >= wave1_start & Onset_Date <= wave1_end ~ \"Wave 1\",\n    Onset_Date >= wave2_start & Onset_Date <= wave2_end ~ \"Wave 2\",\n    Onset_Date >= wave3_start & Onset_Date <= wave3_end ~ \"Wave 3\",\n    TRUE ~ NA_character_\n  ))\n\nwave1 <- weekly_cases %>%\n  filter(week >= wave1_start & week <= wave1_end)\n\nwave2 <- weekly_cases %>%\n  filter(week >= wave2_start & week <= wave2_end)\n\nwave3 <- weekly_cases %>%\n  filter(week >= wave3_start & week <= wave3_end)\n\nwave1 <- wave1 %>% mutate(month_day = format(week, \"%m-%d\"), Outbreak_Year =\"2014\", aligned_date = if_else(month(week) <= 3,\n                           as.Date(paste0(\"2024-\", month_day)),\n                           as.Date(paste0(\"2023-\", month_day)))\n  )\nwave2 <- wave2 %>% mutate(month_day = format(week, \"%m-%d\"), Outbreak_Year =\"2015\", aligned_date = if_else(month(week) <= 3,\n                           as.Date(paste0(\"2024-\", month_day)),\n                           as.Date(paste0(\"2023-\", month_day)))\n  )\nwave3 <- wave3 %>% mutate(month_day = format(week, \"%m-%d\"), Outbreak_Year =\"2023\", aligned_date = if_else(month(week) <= 3,\n                           as.Date(paste0(\"2024-\", month_day)),\n                           as.Date(paste0(\"2023-\", month_day)))\n  )\n\nall_waves <- bind_rows(wave1, wave2, wave3)\n```\n:::\n\n\n\n# 2. Week-based Curve Fitting\n\nBefore starting on model comparison, we must first decide on the types of model we want to include in our comparison. Here is a quick summary of the curves that will be fitted.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for model summaries\"}\ntable_data <- tibble(\n  Model = c(\"Poisson\", \"Negative Binomial\", \"Exponential\", \"GAM\", \"Polynomial\", \"Lognormal\", \"Gamma\"),\n  `Best For` = c(\n    \"Count data with equal mean/variance\",\n    \"Overdispersed count data\",\n    \"Early outbreak exponential growth\",\n    \"Complex trends and multi-peak waves\",\n    \"Epidemic waves (with right degree)\",\n    \"Cumulative or right-skewed data\",\n    \"Skewed continuous outcome (e.g., duration)\"\n  ),\n  Overdispersion = c(\"No\", \"Yes\", \"No\", \"Yes\", \"No\", \"Yes\", \"Yes\"),\n  Flexibility = c(\"Low\", \"Moderate\", \"Low\", \"Very High\", \"High\", \"Moderate\", \"Moderate\"),\n  Interpretability = c(\"High\", \"High\", \"High\", \"Moderate\", \"Low\", \"Low\", \"Low\"),\n  `Overfitting Risk` = c(\"Low\", \"Medium\", \"Low\", \"High\", \"High\", \"Medium\", \"Medium\"),\n  Remarks = c(\n    \"Fails with overdispersion\",\n    \"Good for noisy data\",\n    \"Fits only early phase\",\n    \"Flexible, needs tuning\",\n    \"Prone to overfit with high degree\",\n    \"Good for wave shapes\",\n    \"Good for cumulative modeling\"\n  )\n)\n\n\n\ncolor_overdispersion <- function(x) ifelse(x == \"Yes\", \"lightgreen\", \"tomato\")\ncolor_flexibility <- function(x) case_when(\n  x == \"Low\" ~ \"#f4cccc\",\n  x == \"Moderate\" ~ \"#fce5cd\",\n  x == \"High\" ~ \"#d9ead3\",\n  x == \"Very High\" ~ \"#b6d7a8\",\n  TRUE ~ NA_character_\n)\ncolor_interpretability <- function(x) case_when(\n  x == \"Low\" ~ \"#f4cccc\",\n  x == \"Moderate\" ~ \"#fff2cc\",\n  x == \"High\" ~ \"#b6d7a8\",\n  TRUE ~ NA_character_\n)\ncolor_overfitting <- function(x) case_when(\n  x == \"Low\" ~ \"#b6d7a8\",\n  x == \"Medium\" ~ \"#ffe599\",\n  x == \"High\" ~ \"#f4cccc\",\n  TRUE ~ NA_character_\n)\n\n\n\ntable_data %>%\n  gt() %>%\n  tab_header(title = \"Comparison of Curve Fitting Models\") %>%\n  data_color(columns = c(Overdispersion), fn = color_overdispersion) %>%\n  data_color(columns = c(Flexibility), fn = color_flexibility) %>%\n  data_color(columns = c(Interpretability), fn = color_interpretability) %>%\n  data_color(columns = c(`Overfitting Risk`), fn = color_overfitting)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"hneftiypow\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#hneftiypow table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#hneftiypow thead, #hneftiypow tbody, #hneftiypow tfoot, #hneftiypow tr, #hneftiypow td, #hneftiypow th {\n  border-style: none;\n}\n\n#hneftiypow p {\n  margin: 0;\n  padding: 0;\n}\n\n#hneftiypow .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#hneftiypow .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#hneftiypow .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#hneftiypow .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#hneftiypow .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#hneftiypow .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hneftiypow .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#hneftiypow .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#hneftiypow .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#hneftiypow .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#hneftiypow .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#hneftiypow .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#hneftiypow .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#hneftiypow .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#hneftiypow .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#hneftiypow .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#hneftiypow .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#hneftiypow .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#hneftiypow .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hneftiypow .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#hneftiypow .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#hneftiypow .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#hneftiypow .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hneftiypow .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#hneftiypow .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#hneftiypow .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hneftiypow .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hneftiypow .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#hneftiypow .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hneftiypow .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#hneftiypow .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hneftiypow .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#hneftiypow .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hneftiypow .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#hneftiypow .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hneftiypow .gt_left {\n  text-align: left;\n}\n\n#hneftiypow .gt_center {\n  text-align: center;\n}\n\n#hneftiypow .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#hneftiypow .gt_font_normal {\n  font-weight: normal;\n}\n\n#hneftiypow .gt_font_bold {\n  font-weight: bold;\n}\n\n#hneftiypow .gt_font_italic {\n  font-style: italic;\n}\n\n#hneftiypow .gt_super {\n  font-size: 65%;\n}\n\n#hneftiypow .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#hneftiypow .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#hneftiypow .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#hneftiypow .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#hneftiypow .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#hneftiypow .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#hneftiypow .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#hneftiypow .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#hneftiypow div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_heading\">\n      <td colspan=\"7\" class=\"gt_heading gt_title gt_font_normal gt_bottom_border\" style>Comparison of Curve Fitting Models</td>\n    </tr>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Model\">Model</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Best-For\">Best For</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Overdispersion\">Overdispersion</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Flexibility\">Flexibility</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Interpretability\">Interpretability</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Overfitting-Risk\">Overfitting Risk</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Remarks\">Remarks</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"Model\" class=\"gt_row gt_left\">Poisson</td>\n<td headers=\"Best For\" class=\"gt_row gt_left\">Count data with equal mean/variance</td>\n<td headers=\"Overdispersion\" class=\"gt_row gt_left\" style=\"background-color: #FF6347; color: #FFFFFF;\">No</td>\n<td headers=\"Flexibility\" class=\"gt_row gt_left\" style=\"background-color: #F4CCCC; color: #000000;\">Low</td>\n<td headers=\"Interpretability\" class=\"gt_row gt_left\" style=\"background-color: #B6D7A8; color: #000000;\">High</td>\n<td headers=\"Overfitting Risk\" class=\"gt_row gt_left\" style=\"background-color: #B6D7A8; color: #000000;\">Low</td>\n<td headers=\"Remarks\" class=\"gt_row gt_left\">Fails with overdispersion</td></tr>\n    <tr><td headers=\"Model\" class=\"gt_row gt_left\">Negative Binomial</td>\n<td headers=\"Best For\" class=\"gt_row gt_left\">Overdispersed count data</td>\n<td headers=\"Overdispersion\" class=\"gt_row gt_left\" style=\"background-color: #90EE90; color: #000000;\">Yes</td>\n<td headers=\"Flexibility\" class=\"gt_row gt_left\" style=\"background-color: #FCE5CD; color: #000000;\">Moderate</td>\n<td headers=\"Interpretability\" class=\"gt_row gt_left\" style=\"background-color: #B6D7A8; color: #000000;\">High</td>\n<td headers=\"Overfitting Risk\" class=\"gt_row gt_left\" style=\"background-color: #FFE599; color: #000000;\">Medium</td>\n<td headers=\"Remarks\" class=\"gt_row gt_left\">Good for noisy data</td></tr>\n    <tr><td headers=\"Model\" class=\"gt_row gt_left\">Exponential</td>\n<td headers=\"Best For\" class=\"gt_row gt_left\">Early outbreak exponential growth</td>\n<td headers=\"Overdispersion\" class=\"gt_row gt_left\" style=\"background-color: #FF6347; color: #FFFFFF;\">No</td>\n<td headers=\"Flexibility\" class=\"gt_row gt_left\" style=\"background-color: #F4CCCC; color: #000000;\">Low</td>\n<td headers=\"Interpretability\" class=\"gt_row gt_left\" style=\"background-color: #B6D7A8; color: #000000;\">High</td>\n<td headers=\"Overfitting Risk\" class=\"gt_row gt_left\" style=\"background-color: #B6D7A8; color: #000000;\">Low</td>\n<td headers=\"Remarks\" class=\"gt_row gt_left\">Fits only early phase</td></tr>\n    <tr><td headers=\"Model\" class=\"gt_row gt_left\">GAM</td>\n<td headers=\"Best For\" class=\"gt_row gt_left\">Complex trends and multi-peak waves</td>\n<td headers=\"Overdispersion\" class=\"gt_row gt_left\" style=\"background-color: #90EE90; color: #000000;\">Yes</td>\n<td headers=\"Flexibility\" class=\"gt_row gt_left\" style=\"background-color: #B6D7A8; color: #000000;\">Very High</td>\n<td headers=\"Interpretability\" class=\"gt_row gt_left\" style=\"background-color: #FFF2CC; color: #000000;\">Moderate</td>\n<td headers=\"Overfitting Risk\" class=\"gt_row gt_left\" style=\"background-color: #F4CCCC; color: #000000;\">High</td>\n<td headers=\"Remarks\" class=\"gt_row gt_left\">Flexible, needs tuning</td></tr>\n    <tr><td headers=\"Model\" class=\"gt_row gt_left\">Polynomial</td>\n<td headers=\"Best For\" class=\"gt_row gt_left\">Epidemic waves (with right degree)</td>\n<td headers=\"Overdispersion\" class=\"gt_row gt_left\" style=\"background-color: #FF6347; color: #FFFFFF;\">No</td>\n<td headers=\"Flexibility\" class=\"gt_row gt_left\" style=\"background-color: #D9EAD3; color: #000000;\">High</td>\n<td headers=\"Interpretability\" class=\"gt_row gt_left\" style=\"background-color: #F4CCCC; color: #000000;\">Low</td>\n<td headers=\"Overfitting Risk\" class=\"gt_row gt_left\" style=\"background-color: #F4CCCC; color: #000000;\">High</td>\n<td headers=\"Remarks\" class=\"gt_row gt_left\">Prone to overfit with high degree</td></tr>\n    <tr><td headers=\"Model\" class=\"gt_row gt_left\">Lognormal</td>\n<td headers=\"Best For\" class=\"gt_row gt_left\">Cumulative or right-skewed data</td>\n<td headers=\"Overdispersion\" class=\"gt_row gt_left\" style=\"background-color: #90EE90; color: #000000;\">Yes</td>\n<td headers=\"Flexibility\" class=\"gt_row gt_left\" style=\"background-color: #FCE5CD; color: #000000;\">Moderate</td>\n<td headers=\"Interpretability\" class=\"gt_row gt_left\" style=\"background-color: #F4CCCC; color: #000000;\">Low</td>\n<td headers=\"Overfitting Risk\" class=\"gt_row gt_left\" style=\"background-color: #FFE599; color: #000000;\">Medium</td>\n<td headers=\"Remarks\" class=\"gt_row gt_left\">Good for wave shapes</td></tr>\n    <tr><td headers=\"Model\" class=\"gt_row gt_left\">Gamma</td>\n<td headers=\"Best For\" class=\"gt_row gt_left\">Skewed continuous outcome (e.g., duration)</td>\n<td headers=\"Overdispersion\" class=\"gt_row gt_left\" style=\"background-color: #90EE90; color: #000000;\">Yes</td>\n<td headers=\"Flexibility\" class=\"gt_row gt_left\" style=\"background-color: #FCE5CD; color: #000000;\">Moderate</td>\n<td headers=\"Interpretability\" class=\"gt_row gt_left\" style=\"background-color: #F4CCCC; color: #000000;\">Low</td>\n<td headers=\"Overfitting Risk\" class=\"gt_row gt_left\" style=\"background-color: #FFE599; color: #000000;\">Medium</td>\n<td headers=\"Remarks\" class=\"gt_row gt_left\">Good for cumulative modeling</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n## 2.1. Outbreak Year 2014\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code to obtain Week Index\"}\nwave1 <- wave1 %>%   \n  arrange(week) %>%   \n  mutate(week_index = row_number())\n```\n:::\n\n\n\n### 2.1.1. Model Comparison\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for different models\"}\n# Poisson model\npoisson_model1 <- glm(cases ~ week_index, family = \"poisson\", data = wave1)\n\n# Negative Binomial model\nnb_model1 <- glm.nb(cases ~ week_index, data = wave1)\n\n# Exponential model (linear model on log scale)\nexp_model1 <- glm(log(cases + 1) ~ week_index, family = gaussian(), data = wave1)\n\n# Fit the GAM model \ngam_model1 <- gam(cases ~ s(week_index), family = poisson(), data = wave1)\n\n# Fit 2nd-degree polynomial Poisson regression\npoly_model1 <- glm(cases ~ poly(week_index, 2), family = poisson(), data = wave1)\n\n# Log-Normal (fit on log-transformed cases + 1 to avoid log(0))\nlognormal_model1 <- glm(log(cases + 1) ~ week_index, family = gaussian(), data = wave1)\n\n# Gamma\ngamma_model1 <- glm(cases ~ week_index, family = Gamma(link = \"log\"), data = wave1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for fitted curves\"}\n# Preparation\nwave1 <- wave1 %>%\n  mutate(\n    fitted_poisson1 = predict(poisson_model1, type = \"response\"),\n    fitted_nb1 = predict(nb_model1, type = \"response\"),\n    fitted_exp1 = exp(predict(exp_model1)),\n    fitted_gam1 = predict(gam_model1, type = \"response\"),\n    fitted_poly1 = predict(poly_model1, type = \"response\"),\n    fitted_lognormal1 = exp(predict(lognormal_model1)),\n    fitted_gamma1     = predict(gamma_model1, type = \"response\")\n  )\n\n# Plot\nggplot(wave1, aes(x = week_index)) +\n  geom_point(aes(y = cases), color = \"black\", alpha = 0.6, size = 2) +\n  \n  geom_line(aes(y = fitted_poisson1, color = \"Poisson\"), size = 1) +\n  geom_line(aes(y = fitted_nb1, color = \"Negative Binomial\"), size = 1, linetype = \"dashed\") +\n  geom_line(aes(y = fitted_exp1, color = \"Exponential\"), size = 1, linetype = \"dotdash\") +\n  geom_line(aes(y = fitted_gam1, color = \"GAM\"), size = 1, linetype = \"twodash\") +\n  geom_line(aes(y = fitted_poly1, color = \"Polynomial\"), size = 1, linetype = \"longdash\") +\n  geom_line(aes(y = fitted_lognormal1, color = \"Log-Normal\"), size = 1, linetype = \"solid\") +\n  geom_line(aes(y = fitted_gamma1, color = \"Gamma\"), size = 1, linetype = \"dotted\")\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for fitted curves\"}\n  labs(\n    title = \"Model Comparison on 2014 Outbreak\",\n    subtitle = \"Black = Actual, Lines = Model Fits\",\n    x = \"Week Index\", y = \"Number of Cases\",\n    color = \"Model\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n:::\n\n\n\nTo ensure a better fit for the Polynomial Model, we run the model through different degrees of freedom and get the AIC of each plot, before choosing the best degree that will give us reasonably good AIC results without excessively increasing the degree of freedom.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code to check AIC of Polynomial Model by varying degree of freedom\"}\ndegrees1 <- 1:10\naic_values1 <- numeric(length(degrees1))\nmodels1 <- list()\n\nfor (i in degrees1) {\n  model1 <- glm(cases ~ poly(week_index, i), family = poisson(), data = wave1)\n  models1[[i]] <- model1\n  aic_values1[i] <- AIC(model1)\n}\n\naic_df1 <- data.frame(\n  Degree1 = degrees1,\n  AIC1 = aic_values1\n)\n\nprint(aic_df1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Degree1       AIC1\n1        1 18323.2559\n2        2  2259.2223\n3        3   750.8355\n4        4   617.9736\n5        5   511.6079\n6        6   458.4039\n7        7   460.3838\n8        8   461.8459\n9        9   442.1706\n10      10   442.1970\n```\n\n\n:::\n:::\n\n\n\nThe degree of freedom is then changed before plotting the Polynomial Model again. We should now see that it is a better fit to the dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code on replotting Polynomial Model\"}\n# Changing to fit 3rd-degree polynomial Poisson regression\npoly_model1 <- glm(cases ~ poly(week_index, 6), family = poisson(), data = wave1)\n\nwave1 <- wave1 %>%\n  mutate(\n    fitted_poly1 = predict(poly_model1, type = \"response\")\n  )\n\n# Re-plotting the graph\nggplot(wave1, aes(x = week_index)) +\n  geom_point(aes(y = cases), color = \"black\", alpha = 0.6, size = 2) +\n\n  geom_line(aes(y = fitted_poisson1, color = \"Poisson\"), size = 1) +\n  geom_line(aes(y = fitted_nb1, color = \"Negative Binomial\"), size = 1, linetype = \"dashed\") +\n  geom_line(aes(y = fitted_exp1, color = \"Exponential\"), size = 1, linetype = \"dotdash\") +\n  geom_line(aes(y = fitted_gam1, color = \"GAM\"), size = 1, linetype = \"twodash\") +\n  geom_line(aes(y = fitted_poly1, color = \"Polynomial\"), size = 1, linetype = \"longdash\") +\n  geom_line(aes(y = fitted_lognormal1, color = \"Log-Normal\"), size = 1, linetype = \"solid\") +\n  geom_line(aes(y = fitted_gamma1, color = \"Gamma\"), size = 1, linetype = \"dotted\") +\n\n  labs(\n    title = \"Model Comparison on 2014 Outbreak\",\n    subtitle = \"Black = Actual, Lines = Model Fits\",\n    x = \"Week Index\", y = \"Number of Cases\",\n    color = \"Model\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n#### 2.1.1.1. Akaike Information Criterion (AIC)\n\nWe then compare the AIC values of all the models.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for all models' AIC values\"}\nAIC(poisson_model1, nb_model1, exp_model1, poly_model1, gam_model1, lognormal_model1, gamma_model1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                       df        AIC\npoisson_model1   2.000000 18323.2559\nnb_model1        3.000000   517.2099\nexp_model1       3.000000   150.6526\npoly_model1      7.000000   458.4039\ngam_model1       9.740789   439.9684\nlognormal_model1 3.000000   150.6526\ngamma_model1     3.000000   517.6125\n```\n\n\n:::\n:::\n\n\n\n#### 2.1.1.2. Residuals\n\nWe also look at the residuals for the different models to check on the fitting of the different models.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for plotting all models' residuals\"}\n# Obtaining residuals\nwave1 <- wave1 %>%   mutate(\n  resid_poisson = residuals(poisson_model1, type = \"response\"),     \n  resid_nb = residuals(nb_model1, type = \"response\"),     \n  resid_exp = residuals(exp_model1, type = \"response\"),     \n  resid_poly = residuals(poly_model1, type = \"response\"),     \n  resid_gam = residuals(gam_model1, type = \"response\"),\n  resid_lognormal = residuals(lognormal_model1, type = \"response\"),     \n  resid_gamma = residuals(gamma_model1, type = \"response\"))\n\n# Converting to long format\nresid_long1 <- wave1 %>%   \n  dplyr::select(week_index, resid_poisson, resid_nb, resid_exp, resid_poly, resid_gam, resid_lognormal, resid_gamma) %>%   \n  pivot_longer(     \n    cols = starts_with(\"resid_\"),     \n    names_to = \"model\",     \n    values_to = \"residual\") %>%   \n  mutate(model = recode(model,                         \n                        resid_poisson = \"Poisson\",                         \n                        resid_nb = \"Negative Binomial\",             \n                        resid_exp = \"Exponential\",                        \n                        resid_poly = \"Polynomial\",                         \n                        resid_gam = \"GAM\",\n                        resid_lognormal = \"Lognormal\",\n                        resid_gamma = \"Gamma\")) \n\nresid_long1$model <- fct_relevel(resid_long1$model,                       \n                                \"Poisson\", \"Negative Binomial\", \"Exponential\", \"Polynomial\", \"GAM\", \"Lognormal\", \"Gamma\")\n\n# Plotting residuals\nggplot(resid_long1, aes(x = week_index, y = residual, color = model)) +   geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray50\") +   geom_line(size = 0.7) +   facet_wrap(~ model, scales = \"free_y\") +   \n  labs(     \n    title = \"Residuals for All Models\",     \n    x = \"Week Index\",     \n    y = \"Residuals\") +   \n  theme_minimal() \n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n#### 2.1.1.3. Root Mean Squared Error (RMSE)\n\nThe Root Mean Squared Error (RMSE) is also calculated to know the variation of the fitted curves from the actual data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for all models' RMSE values\"}\nrmse_summary1 <- wave1 %>%    \n  summarise(          \n    Poisson = sqrt(mean(resid_poisson^2)),          \n    `Negative Binomial` = sqrt(mean(resid_nb^2)),          \n    Exponential = sqrt(mean(resid_exp^2)),          \n    Polynomial = sqrt(mean(resid_poly^2)),          \n    GAM = sqrt(mean(resid_gam^2)),\n    Lognormal = sqrt(mean(resid_lognormal^2)),          \n    Gamma = sqrt(mean(resid_gamma^2))) %>%      \n  pivot_longer(everything(), names_to = \"Model\", values_to = \"RMSE\")  \n\nggplot(rmse_summary1, aes(x = reorder(Model, RMSE), y = RMSE, fill = Model)) +      \n  geom_col(width = 0.6, show.legend = FALSE) +      \n  geom_text(aes(label = round(RMSE, 2)), vjust = -0.5, size = 4) +      \n  labs(          \n    title = \"RMSE Comparison Across Models\",  \n    subtitle = \"Lower RMSE indicates better fit\", \n    x = \"Model\", y = \"RMSE\") +      \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n### 2.1.2. Cumulative Model Comparison\n\nCumulative Model Comparisons are also done for the same 7 models.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for plotting Cumulative Models\"}\n# Preparation\nwave1 <- wave1 %>%\n  mutate(\n    cumulative_cases       = cumsum(cases),\n    cumulative_poisson     = cumsum(fitted_poisson1),\n    cumulative_nb          = cumsum(fitted_nb1),\n    cumulative_exp         = cumsum(fitted_exp1),\n    cumulative_gam         = cumsum(fitted_gam1),\n    cumulative_poly        = cumsum(fitted_poly1),\n    cumulative_lognormal    = cumsum(fitted_lognormal1),\n    cumulative_gamma        = cumsum(fitted_gamma1)\n  )\n\n# Plot\nggplot(wave1, aes(x = week_index)) +\n  geom_point(aes(y = cumulative_cases), color = \"black\", alpha = 0.6, size = 2) +\n  \n  geom_line(aes(y = cumulative_poisson, color = \"Poisson\"), size = 1) +\n  geom_line(aes(y = cumulative_nb, color = \"Negative Binomial\"), size = 1, linetype = \"dashed\") +\n  geom_line(aes(y = cumulative_exp, color = \"Exponential\"), size = 1, linetype = \"dotdash\") +\n  geom_line(aes(y = cumulative_gam, color = \"GAM\"), size = 1, linetype = \"twodash\") +\n  geom_line(aes(y = cumulative_poly, color = \"Polynomial\"), size = 1, linetype = \"longdash\") +\n  geom_line(aes(y = cumulative_lognormal, color = \"Log-Normal\"), size = 1, linetype = \"solid\") +\n  geom_line(aes(y = cumulative_gamma, color = \"Gamma\"), size = 1, linetype = \"dotted\") +\n\n  labs(\n    title = \"Cumulative Cases vs Model Fits\",\n    subtitle = \"Black dots = Actual || Lines = Fitted Cumulative Cases\",\n    x = \"Week Index\",\n    y = \"Cumulative Number of Cases\",\n    color = \"Model\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n#### 2.1.2.1. Residuals\n\nResiduals of these models are also plotted.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for plotting Cumulative Models' residuals\"}\n# Prepatation\nwave1 <- wave1 %>%\n  mutate(\n    resid_cum_poisson = cumulative_cases - cumulative_poisson,\n    resid_cum_nb      = cumulative_cases - cumulative_nb,\n    resid_cum_exp     = cumulative_cases - cumulative_exp,\n    resid_cum_poly    = cumulative_cases - cumulative_poly,\n    resid_cum_gam     = cumulative_cases - cumulative_gam,\n    resid_cum_lognormal     = cumulative_cases - cumulative_lognormal,\n    resid_cum_gamma   = cumulative_cases - cumulative_gamma\n  )\n\n# Converting to long format\nresid_cum_long1 <- wave1 %>%\n  dplyr::select(week_index, resid_cum_poisson, resid_cum_nb, resid_cum_exp, resid_cum_poly, resid_cum_gam, resid_cum_lognormal, resid_cum_gamma) %>%\n  pivot_longer(cols = starts_with(\"resid_cum\"),\n               names_to = \"model\",\n               values_to = \"cumulative_residual\") %>%\n  mutate(model = recode(model,\n                        resid_cum_poisson = \"Poisson\",\n                        resid_cum_nb = \"Negative Binomial\",\n                        resid_cum_exp = \"Exponential\",\n                        resid_cum_poly = \"Polynomial\",\n                        resid_cum_gam = \"GAM\",\n                        resid_cum_lognormal = \"Lognormal\",\n                        resid_cum_gamma = \"Gamma\"))\n\n# Plot\nggplot(resid_cum_long1, aes(x = week_index, y = cumulative_residual, color = model)) +\n  geom_line(size = 1) +\n  facet_wrap(~ model, scales = \"free_y\") +\n  labs(\n    title = \"Cumulative Residuals by Model\",\n    x = \"Week Index\",\n    y = \"Cumulative Residual (Actual - Fitted)\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n#### 2.1.2.2. RMSE\n\nRMSE for these cumulative models are also calculated to compare them against actual values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for all Cumulative Models' RMSE values\"}\n# Preparation\nrmse_cum_poisson1 <- sqrt(mean(wave1$resid_cum_poisson^2))\nrmse_cum_nb1      <- sqrt(mean(wave1$resid_cum_nb^2))\nrmse_cum_exp1     <- sqrt(mean(wave1$resid_cum_exp^2))\nrmse_cum_gam1     <- sqrt(mean(wave1$resid_cum_gam^2))\nrmse_cum_poly1    <- sqrt(mean(wave1$resid_cum_poly^2))\nrmse_cum_lognormal1    <- sqrt(mean(wave1$resid_cum_lognormal^2))\nrmse_cum_gamma1   <- sqrt(mean(wave1$resid_cum_gamma^2))\n\n# Put in a table\nrmse_table1 <- tibble(\n  Model = c(\"Poisson\", \"Negative Binomial\", \"Exponential\", \"GAM\", \"Polynomial\", \"Lognormal\", \"Gamma\"),\n  RMSE  = c(rmse_cum_poisson1, rmse_cum_nb1, rmse_cum_exp1, rmse_cum_gam1, rmse_cum_poly1, rmse_cum_lognormal1, rmse_cum_gamma1)\n)\n\n# Plot\nggplot(rmse_table1, aes(x = reorder(Model, RMSE), y = RMSE, fill = Model)) +\n  geom_col(width = 0.6, show.legend = FALSE) +\n  geom_text(aes(label = round(RMSE, 1)), vjust = -0.5, size = 4) +\n  labs(\n    title = \"RMSE of Cumulative Cases by Model\",\n     subtitle = \"Lower RMSE indicates better fit\",\n    x = \"Model\",\n    y = \"RMSE\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\nThe same are also done for Outbreak Year 2015 and 2023.\n\n## 2.2. Outbreak Year 2015\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for 2015 Outbreak week index\"}\nwave2 <- wave2 %>%   \n  arrange(week) %>%   \n  mutate(week_index = row_number())\n```\n:::\n\n\n\n### 2.2.1. Model Comparison\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for AIC values of Polynomial Model\"}\ndegrees2 <- 1:20\naic_values2 <- numeric(length(degrees2))\nmodels2 <- list()\n\nfor (i in degrees2) {\n  model2 <- glm(cases ~ poly(week_index, i), family = poisson(), data = wave2)\n  models2[[i]] <- model2\n  aic_values2[i] <- AIC(model2)\n}\n\naic_df2 <- data.frame(\n  Degree2 = degrees2,\n  AIC2 = aic_values2\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for fitting curves\"}\npoisson_model2 <- glm(cases ~ week_index, family = \"poisson\", data = wave2)\nnb_model2 <- glm.nb(cases ~ week_index, data = wave2)\nexp_model2 <- glm(log(cases + 1) ~ week_index, family = gaussian(), data = wave2)\ngam_model2 <- gam(cases ~ s(week_index), family = poisson(), data = wave2)\npoly_model2 <- glm(cases ~ poly(week_index, 12), family = poisson(), data = wave2)\nlognormal_model2 <- glm(log(cases + 1) ~ week_index, family = gaussian(), data = wave2)\ngamma_model2 <- glm(cases ~ week_index, family = Gamma(link = \"log\"), data = wave2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for plotting models for 2015 Outbreak\"}\n# Preparation\nwave2 <- wave2 %>%\n  mutate(\n    fitted_poisson2 = predict(poisson_model2, type = \"response\"),\n    fitted_nb2 = predict(nb_model2, type = \"response\"),\n    fitted_exp2 = exp(predict(exp_model2)),\n    fitted_gam2 = predict(gam_model2, type = \"response\"),\n    fitted_poly2 = predict(poly_model2, type = \"response\"),\n    fitted_lognormal2 = exp(predict(lognormal_model2)),\n    fitted_gamma2     = predict(gamma_model2, type = \"response\")\n  )\n\n# Plot\nggplot(wave2, aes(x = week_index)) +\n  geom_point(aes(y = cases), color = \"black\", alpha = 0.6, size = 2) +\n  \n  geom_line(aes(y = fitted_poisson2, color = \"Poisson\"), size = 1) +\n  geom_line(aes(y = fitted_nb2, color = \"Negative Binomial\"), size = 1, linetype = \"dashed\") +\n  geom_line(aes(y = fitted_exp2, color = \"Exponential\"), size = 1, linetype = \"dotdash\") +\n  geom_line(aes(y = fitted_gam2, color = \"GAM\"), size = 1, linetype = \"twodash\") +\n  geom_line(aes(y = fitted_poly2, color = \"Polynomial\"), size = 1, linetype = \"longdash\") +\n  geom_line(aes(y = fitted_lognormal2, color = \"Log-Normal\"), size = 1, linetype = \"solid\") +\n  geom_line(aes(y = fitted_gamma2, color = \"Gamma\"), size = 1, linetype = \"dotted\") +\n  \n  \n  labs(\n    title = \"Model Comparison on 2015 Outbreak\",\n    subtitle = \"Black = Actual, Lines = Model Fits\",\n    x = \"Week Index\", y = \"Number of Cases\",\n    color = \"Model\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n#### 2.2.1.1. AIC\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for AIC values\"}\nAIC(poisson_model2, nb_model2, exp_model2, poly_model2, gam_model2, lognormal_model2, gamma_model2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                        df        AIC\npoisson_model2    2.000000 58699.5229\nnb_model2         3.000000   609.6094\nexp_model2        3.000000   174.9942\npoly_model2      13.000000   666.8310\ngam_model2        9.926241   642.3945\nlognormal_model2  3.000000   174.9942\ngamma_model2      3.000000   611.1210\n```\n\n\n:::\n:::\n\n\n\n#### 2.2.1.2. Residuals\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for plotting residuals\"}\n# Obtaining residuals\nwave2 <- wave2 %>%   mutate(\n  resid_poisson = residuals(poisson_model2, type = \"response\"),     \n  resid_nb = residuals(nb_model2, type = \"response\"),     \n  resid_exp = residuals(exp_model2, type = \"response\"),     \n  resid_poly = residuals(poly_model2, type = \"response\"),     \n  resid_gam = residuals(gam_model2, type = \"response\"),\n  resid_lognormal = residuals(lognormal_model2, type = \"response\"),     \n  resid_gamma = residuals(gamma_model2, type = \"response\"))\n\n# Converting to long format\nresid_long2 <- wave2 %>%   \n  dplyr::select(week_index, resid_poisson, resid_nb, resid_exp, resid_poly, resid_gam, resid_lognormal, resid_gamma) %>%   \n  pivot_longer(     \n    cols = starts_with(\"resid_\"),     \n    names_to = \"model\",     \n    values_to = \"residual\") %>%   \n  mutate(model = recode(model,                         \n                        resid_poisson = \"Poisson\",                         \n                        resid_nb = \"Negative Binomial\",             \n                        resid_exp = \"Exponential\",                        \n                        resid_poly = \"Polynomial\",                         \n                        resid_gam = \"GAM\",\n                        resid_lognormal = \"Lognormal\",\n                        resid_gamma = \"Gamma\")) \n\nresid_long2$model <- fct_relevel(resid_long2$model,                       \n                                \"Poisson\", \"Negative Binomial\", \"Exponential\", \"Polynomial\", \"GAM\", \"Lognormal\", \"Gamma\")\n\n# Plotting residuals\nggplot(resid_long2, aes(x = week_index, y = residual, color = model)) +   geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray50\") +   geom_line(size = 0.7) +   facet_wrap(~ model, scales = \"free_y\") +   \n  labs(     \n    title = \"Residuals for All Models\",     \n    x = \"Week Index\",     \n    y = \"Residuals\") +   \n  theme_minimal() \n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n#### 2.2.1.3. RMSE\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for RMSE values\"}\nrmse_summary2 <- wave2 %>%    \n  summarise(          \n    Poisson = sqrt(mean(resid_poisson^2)),          \n    `Negative Binomial` = sqrt(mean(resid_nb^2)),          \n    Exponential = sqrt(mean(resid_exp^2)),          \n    Polynomial = sqrt(mean(resid_poly^2)),          \n    GAM = sqrt(mean(resid_gam^2)),\n    Lognormal = sqrt(mean(resid_lognormal^2)),          \n    Gamma = sqrt(mean(resid_gamma^2))) %>%      \n  pivot_longer(everything(), names_to = \"Model\", values_to = \"RMSE\")  \n\nggplot(rmse_summary2, aes(x = reorder(Model, RMSE), y = RMSE, fill = Model)) +      \n  geom_col(width = 0.6, show.legend = FALSE) +      \n  geom_text(aes(label = round(RMSE, 2)), vjust = -0.5, size = 4) +      \n  labs(          \n    title = \"RMSE Comparison Across Models\", \n    subtitle = \"Lower RMSE indicates better fit\",\n    x = \"Model\", y = \"RMSE\") +      \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n### 2.2.2. Cumulative Model Comparison\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for plotting Cumulative Models\"}\n# Preparation\nwave2 <- wave2 %>%\n  mutate(\n    cumulative_cases       = cumsum(cases),\n    cumulative_poisson     = cumsum(fitted_poisson2),\n    cumulative_nb          = cumsum(fitted_nb2),\n    cumulative_exp         = cumsum(fitted_exp2),\n    cumulative_gam         = cumsum(fitted_gam2),\n    cumulative_poly        = cumsum(fitted_poly2),\n    cumulative_lognormal    = cumsum(fitted_lognormal2),\n    cumulative_gamma        = cumsum(fitted_gamma2)\n  )\n\n# Plot\nggplot(wave2, aes(x = week_index)) +\n  geom_point(aes(y = cumulative_cases), color = \"black\", alpha = 0.6, size = 2) +\n  \n  geom_line(aes(y = cumulative_poisson, color = \"Poisson\"), size = 1) +\n  geom_line(aes(y = cumulative_nb, color = \"Negative Binomial\"), size = 1, linetype = \"dashed\") +\n  geom_line(aes(y = cumulative_exp, color = \"Exponential\"), size = 1, linetype = \"dotdash\") +\n  geom_line(aes(y = cumulative_gam, color = \"GAM\"), size = 1, linetype = \"twodash\") +\n  geom_line(aes(y = cumulative_poly, color = \"Polynomial\"), size = 1, linetype = \"longdash\") +\n  geom_line(aes(y = cumulative_lognormal, color = \"Lognormal\"), size = 1, linetype = \"solid\") +\n  geom_line(aes(y = cumulative_gamma, color = \"Gamma\"), size = 1, linetype = \"dotted\") +\n\n  labs(\n    title = \"Cumulative Cases vs Model Fits\",\n    subtitle = \"Black dots = Actual || Lines = Fitted Cumulative Cases\",\n    x = \"Week Index\",\n    y = \"Cumulative Number of Cases\",\n    color = \"Model\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n#### 2.2.2.1. Residuals\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for plotting Cumulative Models' residuals\"}\n# Prepatation\nwave2 <- wave2 %>%\n  mutate(\n    resid_cum_poisson = cumulative_cases - cumulative_poisson,\n    resid_cum_nb      = cumulative_cases - cumulative_nb,\n    resid_cum_exp     = cumulative_cases - cumulative_exp,\n    resid_cum_poly    = cumulative_cases - cumulative_poly,\n    resid_cum_gam     = cumulative_cases - cumulative_gam,\n    resid_cum_lognormal     = cumulative_cases - cumulative_lognormal,\n    resid_cum_gamma   = cumulative_cases - cumulative_gamma\n  )\n\n# Converting to long format\nresid_cum_long2 <- wave2 %>%\n  dplyr::select(week_index, resid_cum_poisson, resid_cum_nb, resid_cum_exp, resid_cum_poly, resid_cum_gam, resid_cum_lognormal, resid_cum_gamma) %>%\n  pivot_longer(cols = starts_with(\"resid_cum\"),\n               names_to = \"model\",\n               values_to = \"cumulative_residual\") %>%\n  mutate(model = recode(model,\n                        resid_cum_poisson = \"Poisson\",\n                        resid_cum_nb = \"Negative Binomial\",\n                        resid_cum_exp = \"Exponential\",\n                        resid_cum_poly = \"Polynomial\",\n                        resid_cum_gam = \"GAM\",\n                        resid_cum_lognormal = \"Lognormal\",\n                        resid_cum_gamma = \"Gamma\"))\n\n# Plot\nggplot(resid_cum_long2, aes(x = week_index, y = cumulative_residual, color = model)) +\n  geom_line(size = 1) +\n  facet_wrap(~ model, scales = \"free_y\") +\n  labs(\n    title = \"Cumulative Residuals by Model\",\n    x = \"Week Index\",\n    y = \"Cumulative Residual (Actual - Fitted)\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n#### 2.2.2.2. RMSE\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for Cumulative Models' RMSE values\"}\n# Preparation\nrmse_cum_poisson2 <- sqrt(mean(wave2$resid_cum_poisson^2))\nrmse_cum_nb2      <- sqrt(mean(wave2$resid_cum_nb^2))\nrmse_cum_exp2     <- sqrt(mean(wave2$resid_cum_exp^2))\nrmse_cum_gam2     <- sqrt(mean(wave2$resid_cum_gam^2))\nrmse_cum_poly2    <- sqrt(mean(wave2$resid_cum_poly^2))\nrmse_cum_lognormal2    <- sqrt(mean(wave2$resid_cum_lognormal^2))\nrmse_cum_gamma2   <- sqrt(mean(wave2$resid_cum_gamma^2))\n\n# Put in a table\nrmse_table2 <- tibble(\n  Model = c(\"Poisson\", \"Negative Binomial\", \"Exponential\", \"GAM\", \"Polynomial\", \"Lognormal\", \"Gamma\"),\n  RMSE  = c(rmse_cum_poisson2, rmse_cum_nb2, rmse_cum_exp2, rmse_cum_gam2, rmse_cum_poly2, rmse_cum_lognormal2, rmse_cum_gamma2)\n)\n\n# Plot\nggplot(rmse_table2, aes(x = reorder(Model, RMSE), y = RMSE, fill = Model)) +\n  geom_col(width = 0.6, show.legend = FALSE) +\n  geom_text(aes(label = round(RMSE, 1)), vjust = -0.5, size = 4) +\n  labs(\n    title = \"RMSE of Cumulative Cases by Model\",\n    subtitle = \"Lower RMSE indicates better fit\",\n    x = \"Model\",\n    y = \"RMSE\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n## 2.3. Outbreak Year 2023\n\n### 2.3.1. Model Comparison\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for 2023 Outbreak week index\"}\nwave3 <- wave3 %>%   \n  arrange(week) %>%   \n  mutate(week_index = row_number())\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for AIC values of Polynomial Model\"}\ndegrees3 <- 1:20\naic_values3 <- numeric(length(degrees3))\nmodels3 <- list()\n\nfor (i in degrees3) {\n  model3 <- glm(cases ~ poly(week_index, i), family = poisson(), data = wave3)\n  models3[[i]] <- model3\n  aic_values3[i] <- AIC(model3)\n}\n\naic_df3 <- data.frame(\n  Degree3 = degrees3,\n  AIC3 = aic_values3\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for fitting curves\"}\npoisson_model3 <- glm(cases ~ week_index, family = \"poisson\", data = wave3)\nnb_model3 <- glm.nb(cases ~ week_index, data = wave3)\nexp_model3 <- glm(log(cases + 1) ~ week_index, family = gaussian(), data = wave3)\ngam_model3 <- gam(cases ~ s(week_index), family = poisson(), data = wave3)\npoly_model3 <- glm(cases ~ poly(week_index, 9), family = poisson(), data = wave3)\nlognormal_model3 <- glm(log(cases + 1) ~ week_index, family = gaussian(), data = wave3)\ngamma_model3 <- glm(cases ~ week_index, family = Gamma(link = \"log\"), data = wave3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for plotting models for 2023 Outbreak\"}\n# Preparation\nwave3 <- wave3 %>%\n  mutate(\n    fitted_poisson3 = predict(poisson_model3, type = \"response\"),\n    fitted_nb3 = predict(nb_model3, type = \"response\"),\n    fitted_exp3 = exp(predict(exp_model3)),\n    fitted_gam3 = predict(gam_model3, type = \"response\"),\n    fitted_poly3 = predict(poly_model3, type = \"response\"),\n    fitted_lognormal3 = exp(predict(lognormal_model2)),\n    fitted_gamma3     = predict(gamma_model2, type = \"response\"))\n\n# Plot\nggplot(wave3, aes(x = week_index)) +\n  geom_point(aes(y = cases), color = \"black\", alpha = 0.6, size = 2) +\n  \n  geom_line(aes(y = fitted_poisson3, color = \"Poisson\"), size = 1) +\n  geom_line(aes(y = fitted_nb3, color = \"Negative Binomial\"), size = 1, linetype = \"dashed\") +\n  geom_line(aes(y = fitted_exp3, color = \"Exponential\"), size = 1, linetype = \"dotdash\") +\n  geom_line(aes(y = fitted_gam3, color = \"GAM\"), size = 1, linetype = \"twodash\") +\n  geom_line(aes(y = fitted_poly3, color = \"Polynomial\"), size = 1, linetype = \"longdash\") +\n  geom_line(aes(y = fitted_lognormal3, color = \"Log-Normal\"), size = 1, linetype = \"solid\") +\n  geom_line(aes(y = fitted_gamma3, color = \"Gamma\"), size = 1, linetype = \"dotted\") +\n  \n  labs(\n    title = \"Model Comparison on 2023 Outbreak\",\n    subtitle = \"Black = Actual, Lines = Model Fits\",\n    x = \"Week Index\", y = \"Number of Cases\",\n    color = \"Model\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\n#### 2.3.1.1. AIC\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for AIC values\"}\nAIC(poisson_model3, nb_model3, exp_model3, poly_model3, gam_model3, lognormal_model3, gamma_model3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                        df        AIC\npoisson_model3    2.000000 35694.9045\nnb_model3         3.000000   576.5524\nexp_model3        3.000000   169.7138\npoly_model3      10.000000   648.7884\ngam_model3        9.913975   582.5120\nlognormal_model3  3.000000   169.7138\ngamma_model3      3.000000   577.6858\n```\n\n\n:::\n:::\n\n\n\n#### 2.3.1.2. Residuals\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for plotting residuals\"}\n# Obtaining residuals\nwave3 <- wave3 %>%   mutate(\n  resid_poisson = residuals(poisson_model3, type = \"response\"),     \n  resid_nb = residuals(nb_model3, type = \"response\"),     \n  resid_exp = residuals(exp_model3, type = \"response\"),     \n  resid_poly = residuals(poly_model3, type = \"response\"),     \n  resid_gam = residuals(gam_model3, type = \"response\"),\n  resid_lognormal = residuals(lognormal_model3, type = \"response\"),     \n  resid_gamma = residuals(gamma_model3, type = \"response\"))\n\n# Converting to long format\nresid_long3 <- wave3 %>%   \n  dplyr::select(week_index, resid_poisson, resid_nb, resid_exp, resid_poly, resid_gam, resid_lognormal, resid_gamma) %>%   \n  pivot_longer(     \n    cols = starts_with(\"resid_\"),     \n    names_to = \"model\",     \n    values_to = \"residual\") %>%   \n  mutate(model = recode(model,                         \n                        resid_poisson = \"Poisson\",                         \n                        resid_nb = \"Negative Binomial\",             \n                        resid_exp = \"Exponential\",                        \n                        resid_poly = \"Polynomial\",                         \n                        resid_gam = \"GAM\",\n                        resid_lognormal = \"Lognormal\",\n                        resid_gamma = \"Gamma\")) \n\nresid_long3$model <- fct_relevel(resid_long3$model,                       \n                                \"Poisson\", \"Negative Binomial\", \"Exponential\", \"Polynomial\", \"GAM\", \"Lognormal\", \"Gamma\")\n\n# Plotting residuals\nggplot(resid_long3, aes(x = week_index, y = residual, color = model)) +   geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray50\") +   geom_line(size = 0.7) +   facet_wrap(~ model, scales = \"free_y\") +   \n  labs(     \n    title = \"Residuals for All Models\",     \n    x = \"Week Index\",     \n    y = \"Residuals\") +   \n  theme_minimal() \n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n\n#### 2.3.1.3. RMSE\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for plotting RMSE values\"}\nrmse_summary3 <- wave3 %>%    \n  summarise(          \n    Poisson = sqrt(mean(resid_poisson^2)),          \n    `Negative Binomial` = sqrt(mean(resid_nb^2)),          \n    Exponential = sqrt(mean(resid_exp^2)),          \n    Polynomial = sqrt(mean(resid_poly^2)),          \n    GAM = sqrt(mean(resid_gam^2)),\n    Lognormal = sqrt(mean(resid_lognormal^2)),          \n    Gamma = sqrt(mean(resid_gamma^2))) %>%      \n  pivot_longer(everything(), names_to = \"Model\", values_to = \"RMSE\")  \n\nggplot(rmse_summary3, aes(x = reorder(Model, RMSE), y = RMSE, fill = Model)) +      \n  geom_col(width = 0.6, show.legend = FALSE) +      \n  geom_text(aes(label = round(RMSE, 2)), vjust = -0.5, size = 4) +      \n  labs(          \n    title = \"RMSE Comparison Across Models\", \n    subtitle = \"Lower RMSE indicates better fit\",\n    x = \"Model\", y = \"RMSE\") +      \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n\n### 2.3.2. Cumulative Model Comparison\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for plotting Cumulative Models\"}\n# Preparation\nwave3 <- wave3 %>%\n  mutate(\n    cumulative_cases       = cumsum(cases),\n    cumulative_poisson     = cumsum(fitted_poisson3),\n    cumulative_nb          = cumsum(fitted_nb3),\n    cumulative_exp         = cumsum(fitted_exp3),\n    cumulative_gam         = cumsum(fitted_gam3),\n    cumulative_poly        = cumsum(fitted_poly3),\n    cumulative_lognormal   = cumsum(fitted_lognormal3),\n    cumulative_gamma       = cumsum(fitted_gamma3)\n  )\n\n# Plot\nggplot(wave3, aes(x = week_index)) +\n  geom_point(aes(y = cumulative_cases), color = \"black\", alpha = 0.6, size = 2) +\n  \n  geom_line(aes(y = cumulative_poisson, color = \"Poisson\"), size = 1) +\n  geom_line(aes(y = cumulative_nb, color = \"Negative Binomial\"), size = 1, linetype = \"dashed\") +\n  geom_line(aes(y = cumulative_exp, color = \"Exponential\"), size = 1, linetype = \"dotdash\") +\n  geom_line(aes(y = cumulative_gam, color = \"GAM\"), size = 1, linetype = \"twodash\") +\n  geom_line(aes(y = cumulative_poly, color = \"Polynomial\"), size = 1, linetype = \"longdash\") +\n  geom_line(aes(y = cumulative_lognormal, color = \"Lognormal\"), size = 1, linetype = \"solid\") +\n  geom_line(aes(y = cumulative_gamma, color = \"Gamma\"), size = 1, linetype = \"dotted\") +\n\n  labs(\n    title = \"Cumulative Cases vs Model Fits\",\n    subtitle = \"Black dots = Actual || Lines = Fitted Cumulative Cases\",\n    x = \"Week Index\",\n    y = \"Cumulative Number of Cases\",\n    color = \"Model\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n\n#### 2.3.2.1. Residuals\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for plotting Cumulative Models' residuals\"}\n# Prepatation\nwave3 <- wave3 %>%\n  mutate(\n    resid_cum_poisson = cumulative_cases - cumulative_poisson,\n    resid_cum_nb      = cumulative_cases - cumulative_nb,\n    resid_cum_exp     = cumulative_cases - cumulative_exp,\n    resid_cum_poly    = cumulative_cases - cumulative_poly,\n    resid_cum_gam     = cumulative_cases - cumulative_gam,\n    resid_cum_lognormal     = cumulative_cases - cumulative_lognormal,\n    resid_cum_gamma   = cumulative_cases - cumulative_gamma\n  )\n\n# Converting to long format\nresid_cum_long3 <- wave3 %>%\n  dplyr::select(week_index, resid_cum_poisson, resid_cum_nb, resid_cum_exp, resid_cum_poly, resid_cum_gam, resid_cum_lognormal, resid_cum_gamma) %>%\n  pivot_longer(cols = starts_with(\"resid_cum\"),\n               names_to = \"model\",\n               values_to = \"cumulative_residual\") %>%\n  mutate(model = recode(model,\n                        resid_cum_poisson = \"Poisson\",\n                        resid_cum_nb = \"Negative Binomial\",\n                        resid_cum_exp = \"Exponential\",\n                        resid_cum_poly = \"Polynomial\",\n                        resid_cum_gam = \"GAM\",\n                        resid_cum_lognormal = \"Lognormal\",\n                        resid_cum_gamma = \"Gamma\"))\n\n# Plot\nggplot(resid_cum_long3, aes(x = week_index, y = cumulative_residual, color = model)) +\n  geom_line(size = 1) +\n  facet_wrap(~ model, scales = \"free_y\") +\n  labs(\n    title = \"Cumulative Residuals by Model\",\n    x = \"Week Index\",\n    y = \"Cumulative Residual (Actual - Fitted)\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n\n#### 2.3.2.2. RMSE\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for plotting Cumulative Models' RMSE values\"}\n# Preparation\nrmse_cum_poisson3 <- sqrt(mean(wave3$resid_cum_poisson^2))\nrmse_cum_nb3      <- sqrt(mean(wave3$resid_cum_nb^2))\nrmse_cum_exp3     <- sqrt(mean(wave3$resid_cum_exp^2))\nrmse_cum_gam3     <- sqrt(mean(wave3$resid_cum_gam^2))\nrmse_cum_poly3    <- sqrt(mean(wave3$resid_cum_poly^2))\nrmse_cum_lognormal3    <- sqrt(mean(wave3$resid_cum_lognormal^2))\nrmse_cum_gamma3   <- sqrt(mean(wave3$resid_cum_gamma^2))\n\n# Put in a table\nrmse_table3 <- tibble(\n  Model = c(\"Poisson\", \"Negative Binomial\", \"Exponential\", \"GAM\", \"Polynomial\", \"Lognormal\", \"Gamma\"),\n  RMSE  = c(rmse_cum_poisson3, rmse_cum_nb3, rmse_cum_exp3, rmse_cum_gam3, rmse_cum_poly3, rmse_cum_lognormal3, rmse_cum_gamma3)\n)\n\n# Plot\nggplot(rmse_table3, aes(x = reorder(Model, RMSE), y = RMSE, fill = Model)) +\n  geom_col(width = 0.6, show.legend = FALSE) +\n  geom_text(aes(label = round(RMSE, 1)), vjust = -0.5, size = 4) +\n  labs(\n    title = \"RMSE of Cumulative Cases by Model\",\n    subtitle = \"Lower RMSE indicates better fit\",\n    x = \"Model\",\n    y = \"RMSE\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n\n# 3. Progress-based Curve fitting\n\nTo see how well a model trained with 1 outbreak period would perform on the other outbreak period, we load *progress* with the proportion of cases instead of a fixed count. This will allow us to better compare the graph shape of the outbreak period with another outbreak period.\n\nThe models being compared in this segment will include GAM Model, Polynomial Model, Exponential Model, Negative Binomial Model and Poisson Model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for obtaining Progress from 3 waves\"}\n# For Wave 1\nwave1 <- wave1 %>%\n  arrange(week_index) %>%\n  mutate(\n    cum_cases = cumsum(cases),\n    progress = cum_cases / max(cum_cases)\n  )\n\n# For Wave 2\nwave2 <- wave2 %>%\n  arrange(week_index) %>%\n  mutate(\n    cum_cases = cumsum(cases),\n    progress = cum_cases / max(cum_cases)\n  )\n\n# For Wave 3\nwave3 <- wave3 %>%\n  arrange(week_index) %>%\n  mutate(\n    cum_cases = cumsum(cases),\n    progress = cum_cases / max(cum_cases)\n  )\n```\n:::\n\n\n\n## 3.1. Using 2014 Outbreak (Wave 1)\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for fitting models using Wave 1's data\"}\n# GAM model\ngam_progress1 <- gam(cases ~ s(progress), family = poisson(), data = wave1)\n\n# Polynomial model\npoly_progress1 <- glm(cases ~ poly(progress, 4), family = poisson(), data = wave1)\n\n# Exponential model (fit on log scale)\nexp_progress1 <- glm(log(cases + 1) ~ progress, family = gaussian(), data = wave1)\n\n# Negative Binomial\nnb_progress1 <- glm.nb(cases ~ poly(progress, 4), data = wave1)\n\n# Poisson\npoisson_progress1 <- glm(cases ~ poly(progress, 4), family = \"poisson\", data = wave1)\n```\n:::\n\n\n\nWe then attempt to predict the shape of Wave 2 and Wave 3 using the data from Wave 1.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for predicting Wave 2 and Wave 3\"}\n# Predict using Wave 1 models on Wave 2\nwave2 <- wave2 %>%\n  mutate(\n    pred_gam1   = predict(gam_progress1, newdata = wave2, type = \"response\"),\n    pred_poly1  = predict(poly_progress1, newdata = wave2, type = \"response\"),\n    pred_exp1   = exp(predict(exp_progress1, newdata = wave2)) - 1,\n    pred_nb1 = predict(nb_progress1, newdata = wave2, type = \"response\"),\n    pred_poisson1 = predict(poisson_progress1, newdata = wave2, type = \"response\")\n  )\n\n# Predict using Wave 1 models on Wave 3\nwave3 <- wave3 %>%\n  mutate(\n    pred_gam1   = predict(gam_progress1, newdata = wave3, type = \"response\"),\n    pred_poly1  = predict(poly_progress1, newdata = wave3, type = \"response\"),\n    pred_exp1   = exp(predict(exp_progress1, newdata = wave3)) - 1,\n    pred_nb1 = predict(nb_progress1, newdata = wave3, type = \"response\"),\n    pred_poisson1 = predict(poisson_progress1, newdata = wave3, type = \"response\")\n  )\n```\n:::\n\n\n\nThe predicted values are then plotted in the same plot as the actual values for visual comparison.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for plotting predicted and actual values of Wave 2 and Wave 3\"}\n# Combine and label\nwave1$wave <- \"Wave 1\"\nwave2$wave <- \"Wave 2\"\nwave3$wave <- \"Wave 3\"\npredicted_progress1 <- bind_rows(wave1, wave2, wave3)\n\nggplot(predicted_progress1, aes(x = progress)) +\n  geom_line(aes(y = cases, color = wave), size = 2, alpha = 0.5) +\n  \n  geom_line(aes(y = pred_gam1, color = \"GAM\"), linewidth = 1.2) +\n  geom_line(aes(y = pred_poly1, color = \"Polynomial\"), linewidth = 1.2, linetype = \"dashed\") +\n  geom_line(aes(y = pred_exp1, color = \"Exponential\"), linewidth = 1.2, linetype = \"dotdash\") +\n  geom_line(aes(y = pred_nb1, color = \"Negative Binomial\"), linewidth = 1, linetype = \"twodash\") +\n  geom_line(aes(y = pred_poisson1, color = \"Poisson\"), linewidth = 1, linetype = \"longdash\") +\n\n  facet_wrap(~wave, scales = \"free_x\") +\n  labs(\n    title = \"Predicted vs Actual Epidemic Shapes (by Progress)\",\n    x = \"Progress (0 to 1)\",\n    y = \"Weekly Cases\",\n    color = \"Model / Wave\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n\nThese steps are then repeated for the next two outbreak waves as well.\n\n## 3.2. Using 2015 Outbreak (Wave 2)\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for fitting models using Wave 2's data\"}\n# GAM model\ngam_progress2 <- gam(cases ~ s(progress), family = poisson(), data = wave2)\n\n# Polynomial model\npoly_progress2 <- glm(cases ~ poly(progress, 4), family = poisson(), data = wave2)\n\n# Exponential model (fit on log scale)\nexp_progress2 <- glm(log(cases + 1) ~ progress, family = gaussian(), data = wave2)\n\n# Negative Binomial\nnb_progress2 <- glm.nb(cases ~ poly(progress, 4), data = wave2)\n\n# Poisson\npoisson_progress2 <- glm(cases ~ poly(progress, 4), family = \"poisson\", data = wave2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for predicting Wave 1 and Wave 3\"}\n# Predict on Wave 1\nwave1 <- wave1 %>%\n  mutate(\n    pred_gam2       = predict(gam_progress2, newdata = wave1, type = \"response\"),\n    pred_poly2      = predict(poly_progress2, newdata = wave1, type = \"response\"),\n    pred_exp2       = exp(predict(exp_progress2, newdata = wave1)) - 1,\n    pred_nb2 = predict(nb_progress2, newdata = wave1, type = \"response\"),\n    pred_poisson2 = predict(poisson_progress2, newdata = wave1, type = \"response\"))\n\n# Predict on Wave 3\nwave3 <- wave3 %>%\n  mutate(\n    pred_gam2       = predict(gam_progress2, newdata = wave3, type = \"response\"),\n    pred_poly2      = predict(poly_progress2, newdata = wave3, type = \"response\"),\n    pred_exp2       = exp(predict(exp_progress2, newdata = wave3)) - 1,\n    pred_nb2 = predict(nb_progress2, newdata = wave3, type = \"response\"),\n    pred_poisson2 = predict(poisson_progress2, newdata = wave3, type = \"response\")\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for plotting predicted and actual values of Wave 1 and Wave 3\"}\n# Combine for plotting\nwave1$wave <- \"Wave 1\"\nwave2$wave <- \"Wave 2\"\nwave3$wave <- \"Wave 3\"\npredicted_progress2 <- bind_rows(wave1, wave2, wave3)\n\n\nggplot(predicted_progress2, aes(x = progress)) +\n  geom_line(aes(y = cases, color = wave), alpha = 0.5, size = 2) +\n  \n  geom_line(aes(y = pred_gam2, color = \"GAM (from Wave 2)\"), linewidth = 1) +\n  geom_line(aes(y = pred_poly2, color = \"Polynomial (from Wave 2)\"), linewidth = 1, linetype = \"dashed\") +\n  geom_line(aes(y = pred_exp2, color = \"Exponential (from Wave 2)\"), linewidth = 1, linetype = \"dotdash\") +\n  geom_line(aes(y = pred_nb2, color = \"Negative Binomial (Wave 2)\"), linewidth = 1, linetype = \"twodash\") +\n  geom_line(aes(y = pred_poisson2, color = \"Poisson (Wave 2)\"), linewidth = 1, linetype = \"longdash\") +\n\n  facet_wrap(~wave, scales = \"free_x\") +\n  labs(\n    title = \"Predictions on Wave 1 & 3 using Models Trained on Wave 2\",\n    x = \"Progress (0–1)\",\n    y = \"Cases\",\n    color = \"Model / Wave\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n\n## 3.3. Using 2023 Outbreak (Wave 3)\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for fitting models using Wave 3's data\"}\n# GAM\ngam_progress3 <- gam(cases ~ s(progress), family = poisson(), data = wave3)\n\n# Polynomial\npoly_progress3 <- glm(cases ~ poly(progress, 4), family = poisson(), data = wave3)\n\n# Exponential (log scale)\nexp_progress3 <- glm(log(cases + 1) ~ progress, family = gaussian(), data = wave3)\n\n# Negative Binomial\nnb_progress3 <- glm.nb(cases ~ poly(progress, 4), data = wave3)\n\n# Poisson\npoisson_progress3 <- glm(cases ~ poly(progress, 4), family = \"poisson\", data = wave3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for predicting Wave 1 and Wave 2\"}\nwave1 <- wave1 %>%\n  mutate(\n    pred_gam3      = predict(gam_progress3, newdata = wave1, type = \"response\"),\n    pred_poly3     = predict(poly_progress3, newdata = wave1, type = \"response\"),\n    pred_exp3      = exp(predict(exp_progress3, newdata = wave1)) - 1,\n    pred_nb3 = predict(nb_progress3, newdata = wave1, type = \"response\"),\n    pred_poisson3 = predict(poisson_progress3, newdata = wave1, type = \"response\")\n  )\n\nwave2 <- wave2 %>%\n  mutate(\n    pred_gam3      = predict(gam_progress3, newdata = wave2, type = \"response\"),\n    pred_poly3     = predict(poly_progress3, newdata = wave2, type = \"response\"),\n    pred_exp3      = exp(predict(exp_progress3, newdata = wave2)) - 1,\n    pred_nb3 = predict(nb_progress3, newdata = wave2, type = \"response\"),\n    pred_poisson3 = predict(poisson_progress3, newdata = wave2, type = \"response\")\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for plotting predicted and actual values of Wave 1 and Wave 2\"}\nwave1$wave <- \"Wave 1\"\nwave2$wave <- \"Wave 2\"\nwave3$wave <- \"Wave 3\"\npredicted_progress3 <- bind_rows(wave1, wave2, wave3)\n\nggplot(predicted_progress3, aes(x = progress)) +\n  geom_line(aes(y = cases, color = wave), size = 2, alpha = 0.5) +\n\n  geom_line(aes(y = pred_gam3, color = \"GAM (from Wave 3)\"), linewidth = 1) +\n  geom_line(aes(y = pred_poly3, color = \"Polynomial (from Wave 3)\"), linewidth = 1, linetype = \"dashed\") +\n  geom_line(aes(y = pred_exp3, color = \"Exponential (from Wave 3)\"), linewidth = 1, linetype = \"dotdash\") +\n  geom_line(aes(y = pred_nb3, color = \"Negative Binomial (Wave 3)\"), linewidth = 1, linetype = \"twodash\") +\n  geom_line(aes(y = pred_poisson3, color = \"Poisson (Wave 3)\"), linewidth = 1, linetype = \"longdash\") +\n\n  facet_wrap(~wave, scales = \"free_x\") +\n  labs(\n    title = \"Predictions on Wave 1 & 2 using Models Trained on Wave 3\",\n    x = \"Progress (0–1)\",\n    y = \"Cases\",\n    color = \"Model / Wave\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n\n\n## 3.4. Cumulative Model Comparison using RMSE\n\nA function of RMSE is created to reduce the troublesome steps of obtaining the RMSE values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for RMSE function\"}\nrmse <- function(actual, predicted) {\n  sqrt(mean((actual - predicted)^2, na.rm = TRUE))}\n```\n:::\n\n\n\n### 3.4.1. Predicting 2014 Outbreak\n\nWe then compare the RMSE of the predicted values against the actual values when the models are trained using the different waves. For example, we look at Wave 2's and Wave 3's predicted values against Wave 1's actual values and see which model is better at predicting these values.\n\nThe same is repeated for the other outbreak periods.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for predicting the 2014 Outbreak\"}\nfit_metrics231 <- tibble(\n  Model = rep(c(\"GAM\", \"Polynomial\", \"Exponential\", \"Negative\\nBinomial\", \"Poisson\"), times = 2),\n  RMSE = c(\n    rmse(wave1$cases, wave1$pred_gam2),\n    rmse(wave1$cases, wave1$pred_poly2),\n    rmse(wave1$cases, wave1$pred_exp2),\n    rmse(wave1$cases, wave1$pred_nb2),\n    rmse(wave1$cases, wave1$pred_poisson2),\n    \n    rmse(wave1$cases, wave1$pred_gam3),\n    rmse(wave1$cases, wave1$pred_poly3),\n    rmse(wave1$cases, wave1$pred_exp3),\n    rmse(wave1$cases, wave1$pred_nb3),\n    rmse(wave1$cases, wave1$pred_poisson3)\n  ),\n  Wave = rep(c(\"Wave 2\", \"Wave 3\"), each = 5)\n)\n\n# Plot side-by-side bars\nggplot(fit_metrics231, aes(x = Model, y = RMSE, fill = Wave)) +\n  geom_col(position = position_dodge(width = 0.9)) +\n  geom_text(aes(label = round(RMSE, 2)), \n            position = position_dodge(width = 0.8), \n            vjust = -0.3, size = 2.5) +\n  labs(\n    title = \"RMSE of Models (Wave 2 vs Wave 3)\",\n    x = \"Model\",\n    y = \"RMSE\"\n  ) +\n  theme_minimal() +\n  scale_fill_brewer(palette = \"Pastel1\")\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n\n\n### 3.4.2. Predicting 2015 Outbreak\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for predicting the 2015 Outbreak\"}\nfit_metrics132 <- tibble(\n  Model = rep(c(\"GAM\", \"Polynomial\", \"Exponential\", \"Negative\\nBinomial\", \"Poisson\"), times = 2),\n  RMSE = c(\n    rmse(wave2$cases, wave2$pred_gam1),\n    rmse(wave2$cases, wave2$pred_poly1),\n    rmse(wave2$cases, wave2$pred_exp1),\n    rmse(wave2$cases, wave2$pred_nb1),\n    rmse(wave2$cases, wave2$pred_poisson1),\n    \n    rmse(wave2$cases, wave2$pred_gam3),\n    rmse(wave2$cases, wave2$pred_poly3),\n    rmse(wave2$cases, wave2$pred_exp3),\n    rmse(wave2$cases, wave2$pred_nb3),\n    rmse(wave2$cases, wave2$pred_poisson3)\n  ),\n  Wave = rep(c(\"Wave 1\", \"Wave 3\"), each = 5)\n)\n\n# Plot side-by-side bars\nggplot(fit_metrics132, aes(x = Model, y = RMSE, fill = Wave)) +\n  geom_col(position = position_dodge(width = 0.9)) +\n  geom_text(aes(label = round(RMSE, 2)), \n            position = position_dodge(width = 0.8), \n            vjust = -0.3, size = 2.5) +\n  labs(\n    title = \"RMSE of Models (Wave 1 vs Wave 3)\",\n    x = \"Model\",\n    y = \"RMSE\"\n  ) +\n  theme_minimal() +\n  scale_fill_brewer(palette = \"Pastel1\")\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\n\n### 3.4.3. Predicting 2023 Outbreak\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for predicting the 2023 Outbreak\"}\nfit_metrics123 <- tibble(\n  Model = rep(c(\"GAM\", \"Polynomial\", \"Exponential\", \"Negative\\nBinomial\", \"Poisson\"), times = 2),\n  RMSE = c(\n    rmse(wave3$cases, wave3$pred_gam1),\n    rmse(wave3$cases, wave3$pred_poly1),\n    rmse(wave3$cases, wave3$pred_exp1),\n    rmse(wave3$cases, wave3$pred_nb1),\n    rmse(wave3$cases, wave3$pred_poisson1),\n    \n    rmse(wave3$cases, wave3$pred_gam2),\n    rmse(wave3$cases, wave3$pred_poly2),\n    rmse(wave3$cases, wave3$pred_exp2),\n    rmse(wave3$cases, wave3$pred_nb2),\n    rmse(wave3$cases, wave3$pred_poisson2)\n  ),\n  Wave = rep(c(\"Wave 1\", \"Wave 2\"), each = 5)\n)\n\n# Plot side-by-side bars\nggplot(fit_metrics123, aes(x = Model, y = RMSE, fill = Wave)) +\n  geom_col(position = position_dodge(width = 0.9)) +\n  geom_text(aes(label = round(RMSE, 2)), \n            position = position_dodge(width = 0.8), \n            vjust = -0.3, size = 2.5) +\n  labs(\n    title = \"RMSE of Models (Wave 1 vs Wave 2)\",\n    x = \"Model\",\n    y = \"RMSE\"\n  ) +\n  theme_minimal() +\n  scale_fill_brewer(palette = \"Pastel1\")\n```\n\n::: {.cell-output-display}\n![](time_series_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "time_series_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}